Find all "public( static)? [^ ]+ ([^ ]+)\(", Regular expressions, Current Project: src\NetTopologySuite\NetTopologySuite.csproj, "!*\bin\*;!*\obj\*;!*\.*"
Algorithm\Angle.cs(30):public static double ToDegrees(double radians)
Algorithm\Angle.cs(40):public static double ToRadians(double angleDegrees)
Algorithm\Angle.cs(52):public static double Angle(Coordinate p0, Coordinate p1)
Algorithm\Angle.cs(67):public static double Angle(Coordinate p)
Algorithm\Angle.cs(83):public static bool IsAcute(Coordinate p0, Coordinate p1, Coordinate p2)
Algorithm\Angle.cs(105):public static bool IsObtuse(Coordinate p0, Coordinate p1, Coordinate p2)
Algorithm\Angle.cs(125):public static double AngleBetween(Coordinate tip1, Coordinate tail, Coordinate tip2)
Algorithm\Angle.cs(144):public static double AngleBetweenOriented(Coordinate tip1, Coordinate tail, Coordinate tip2)
Algorithm\Angle.cs(167):public static double Bisector(Coordinate tip1, Coordinate tail,
Algorithm\Angle.cs(184):public static double InteriorAngle(Coordinate p0, Coordinate p1, Coordinate p2)
Algorithm\Angle.cs(197):public static OrientationIndex GetTurn(double ang1, double ang2)
Algorithm\Angle.cs(219):public static double Normalize(double angle)
Algorithm\Angle.cs(248):public static double NormalizePositive(double angle)
Algorithm\Angle.cs(281):public static double Diff(double ang1, double ang2)
Algorithm\Angle.cs(309):public static Coordinate Project(Coordinate p, double angle, double dist)
Algorithm\Area.cs(18):public static double OfRing(Coordinate[] ring)
Algorithm\Area.cs(28):public static double OfRing(CoordinateSequence ring)
Algorithm\Area.cs(40):public static double OfRingSigned(Coordinate[] ring)
Algorithm\Area.cs(79):public static double OfRingSigned(CoordinateSequence ring)
Algorithm\BoundaryNodeRule.cs(97):public bool IsInBoundary(int boundaryCount)
Algorithm\BoundaryNodeRule.cs(127):public bool IsInBoundary(int boundaryCount)
Algorithm\BoundaryNodeRule.cs(143):public bool IsInBoundary(int boundaryCount)
Algorithm\BoundaryNodeRule.cs(158):public bool IsInBoundary(int boundaryCount)
Algorithm\Centroid.cs(46):public static Coordinate GetCentroid(Geometry geom)
Algorithm\Centroid.cs(122):public Coordinate GetCentroid()
Algorithm\CGAlgorithms3D.cs(21):public static double Distance(Coordinate p0, Coordinate p1)
Algorithm\CGAlgorithms3D.cs(41):public static double DistancePointSegment(Coordinate p,
Algorithm\CGAlgorithms3D.cs(90):public static double DistanceSegmentSegment(
Algorithm\CGAlgorithmsDD.cs(26):public static int OrientationIndex(Coordinate p1, Coordinate p2, Coordinate q)
Algorithm\CGAlgorithmsDD.cs(47):public static int OrientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy)
Algorithm\CGAlgorithmsDD.cs(79):public static int SignOfDet2x2(DD x1, DD y1, DD x2, DD y2)
Algorithm\CGAlgorithmsDD.cs(172):public static Coordinate Intersection(
Algorithm\Construct\LargestEmptyCircle.cs(47):public static Point GetCenter(Geometry obstacles, double tolerance)
Algorithm\Construct\LargestEmptyCircle.cs(60):public static LineString GetRadiusLine(Geometry obstacles, double tolerance)
Algorithm\Construct\LargestEmptyCircle.cs(122):public Point GetCenter()
Algorithm\Construct\LargestEmptyCircle.cs(137):public Point GetRadiusPoint()
Algorithm\Construct\LargestEmptyCircle.cs(147):public LineString GetRadiusLine()
Algorithm\Construct\LargestEmptyCircle.cs(373):public int CompareTo(Cell o)
Algorithm\Construct\MaximumInscribedCircle.cs(50):public static Point GetCenter(Geometry polygonal, double tolerance)
Algorithm\Construct\MaximumInscribedCircle.cs(63):public static LineString GetRadiusLine(Geometry polygonal, double tolerance)
Algorithm\Construct\MaximumInscribedCircle.cs(111):public Point GetCenter()
Algorithm\Construct\MaximumInscribedCircle.cs(126):public Point GetRadiusPoint()
Algorithm\Construct\MaximumInscribedCircle.cs(136):public LineString GetRadiusLine()
Algorithm\Construct\MaximumInscribedCircle.cs(311):public int CompareTo(Cell o)
Algorithm\ConvexHull.cs(27):public static Geometry Create(IEnumerable<Geometry> geoms)
Algorithm\ConvexHull.cs(107):public Geometry GetConvexHull()
Algorithm\ConvexHull.cs(429):public int Compare(Coordinate p1, Coordinate p2)
Algorithm\ConvexHull.cs(470):public void Filter(Coordinate coord)
Algorithm\Distance.cs(24):public static double SegmentToSegment(Coordinate A, Coordinate B,
Algorithm\Distance.cs(105):public static double PointToSegmentString(Coordinate p, Coordinate[] line)
Algorithm\Distance.cs(129):public static double PointToSegmentString(Coordinate p, CoordinateSequence line)
Algorithm\Distance.cs(159):public static double PointToSegment(Coordinate p, Coordinate A,
Algorithm\Distance.cs(211):public static double PointToLinePerpendicular(Coordinate p,
Algorithm\Distance\DiscreteFrechetDistance.cs(49):public static double Distance(Geometry g0, Geometry g1)
Algorithm\Distance\DiscreteHausdorffDistance.cs(61):public static double Distance(Geometry g0, Geometry g1)
Algorithm\Distance\DiscreteHausdorffDistance.cs(74):public static double Distance(Geometry g0, Geometry g1, double densifyFraction)
Algorithm\Distance\DiscreteHausdorffDistance.cs(125):public double Distance()
Algorithm\Distance\DiscreteHausdorffDistance.cs(135):public double OrientedDistance()
Algorithm\Distance\DiscreteHausdorffDistance.cs(188):public void Filter(Coordinate pt)
Algorithm\Distance\DiscreteHausdorffDistance.cs(226):public void Filter(CoordinateSequence seq, int index)
Algorithm\Distance\DistanceToPoint.cs(19):public static void ComputeDistance(Geometry geom, Coordinate pt, PointPairDistance ptDist)
Algorithm\Distance\DistanceToPoint.cs(51):public static void ComputeDistance(LineString line, Coordinate pt, PointPairDistance ptDist)
Algorithm\Distance\DistanceToPoint.cs(70):public static void ComputeDistance(LineSegment segment, Coordinate pt, PointPairDistance ptDist)
Algorithm\Distance\DistanceToPoint.cs(82):public static void ComputeDistance(Polygon poly, Coordinate pt, PointPairDistance ptDist)
Algorithm\Distance\PointPairDistance.cs(21):public void Initialize() { _isNull = true; }
Algorithm\Distance\PointPairDistance.cs(28):public void Initialize(Coordinate p0, Coordinate p1)
Algorithm\Distance\PointPairDistance.cs(72):public void SetMaximum(PointPairDistance ptDist)
Algorithm\Distance\PointPairDistance.cs(86):public void SetMaximum(Coordinate p0, Coordinate p1)
Algorithm\Distance\PointPairDistance.cs(103):public void SetMinimum(PointPairDistance ptDist)
Algorithm\Distance\PointPairDistance.cs(117):public void SetMinimum(Coordinate p0, Coordinate p1)
Algorithm\HCoordinate.cs(29):public static Coordinate Intersection(
Algorithm\HCoordinate.cs(72):public static Coordinate OldIntersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2)
Algorithm\HCoordinate.cs(135):public double GetX()
Algorithm\HCoordinate.cs(148):public double GetY()
Algorithm\Hull\ConcaveHull.cs(55):public static double UniformGridEdgeLength(Geometry geom)
Algorithm\Hull\ConcaveHull.cs(69):public static Geometry ConcaveHullByLength(Geometry geom, double maxLength)
Algorithm\Hull\ConcaveHull.cs(83):public static Geometry ConcaveHullByLength(Geometry geom, double maxLength, bool isHolesAllowed)
Algorithm\Hull\ConcaveHull.cs(103):public static Geometry ConcaveHullByLengthRatio(Geometry geom, double lengthRatio)
Algorithm\Hull\ConcaveHull.cs(120):public static Geometry ConcaveHullByLengthRatio(Geometry geom, double lengthRatio, bool isHolesAllowed)
Algorithm\Hull\ConcaveHull.cs(211):public Geometry GetHull()
Algorithm\Hull\HullTri.cs(33):public void SetSizeToBoundary()
Algorithm\Hull\HullTri.cs(117):public int Adjacent2VertexIndex()
Algorithm\Hull\HullTri.cs(131):public int IsolatedVertexIndex(IList<Tri> triList)
Algorithm\Hull\HullTri.cs(173):public int CompareTo(HullTri o)
Algorithm\Hull\HullTri.cs(218):public static HullTri FindTri(IEnumerable<Tri> triList, Tri exceptTri)
Algorithm\Hull\HullTri.cs(226):public static bool AreAllMarked(IEnumerable<Tri> triList)
Algorithm\Hull\HullTri.cs(234):public static void ClearMarks(IEnumerable<Tri> triList)
Algorithm\Hull\HullTri.cs(240):public static void MarkConnected(HullTri triStart, Tri exceptTri)
Algorithm\Hull\HullTri.cs(269):public static bool IsConnected(IList<Tri> triList, HullTri exceptTri)
Algorithm\Hull\HullTriangulation.cs(18):public static IList<Tri> CreateDelaunayTriangulation(Geometry geom)
Algorithm\Hull\HullTriangulation.cs(41):public void Visit(QuadEdge[] triEdges)
Algorithm\Hull\HullTriangulation.cs(58):public IList<Tri> GetTriangles()
Algorithm\Hull\HullTriangulation.cs(71):public static Geometry Union(IList<Tri> triList, GeometryFactory geomFactory)
Algorithm\Hull\HullTriangulation.cs(89):public static Geometry TraceBoundaryPolygon(IList<Tri> triList, GeometryFactory geomFactory)
Algorithm\Hull\HullTriangulation.cs(142):public static HullTri NextBorderTri(Tri triStart)
Algorithm\Hull\LinkedRing.cs(47):public int Next(int i)
Algorithm\Hull\LinkedRing.cs(52):public int Prev(int i)
Algorithm\Hull\LinkedRing.cs(57):public Coordinate GetCoordinate(int index)
Algorithm\Hull\LinkedRing.cs(62):public Coordinate PrevCoordinate(int index)
Algorithm\Hull\LinkedRing.cs(67):public Coordinate NextCoordinate(int index)
Algorithm\Hull\LinkedRing.cs(72):public bool HasCoordinate(int index)
Algorithm\Hull\LinkedRing.cs(78):public void RemoveAt(int index)
Algorithm\Hull\PolygonHull.cs(51):public static Geometry Hull(Geometry geom, double vertexNumFraction)
Algorithm\Hull\PolygonHull.cs(70):public static Geometry HullByAreaDelta(Geometry geom, double areaDeltaRatio)
Algorithm\Hull\PolygonHull.cs(127):public Geometry GetResult()
Algorithm\Hull\RingHull.cs(56):public LinearRing GetHull(RingHullIndex hullIndex)
Algorithm\Hull\RingHull.cs(102):public static bool IsConvex(LinkedRing vertexRing, int index)
Algorithm\Hull\RingHull.cs(110):public static double Area(LinkedRing vertexRing, int index)
Algorithm\Hull\RingHull.cs(118):public void Compute(RingHullIndex hullIndex)
Algorithm\Hull\RingHull.cs(252):public Polygon ToGeometry()
Algorithm\Hull\RingHull.cs(274):public bool IsVertex(int index)
Algorithm\Hull\RingHull.cs(288):public int CompareTo(Corner o)
Algorithm\Hull\RingHull.cs(293):public Envelope Envelope(LinkedRing ring)
Algorithm\Hull\RingHull.cs(303):public bool Intersects(Coordinate v, LinkedRing ring)
Algorithm\Hull\RingHull.cs(311):public bool IsRemoved(LinkedRing ring)
Algorithm\Hull\RingHull.cs(316):public LineString ToLineString(LinkedRing ring)
Algorithm\Hull\RingHullIndex.cs(12):public void Add(RingHull ringHull)
Algorithm\Hull\RingHullIndex.cs(17):public List<RingHull> Query(Envelope queryEnv)
Algorithm\InteriorPoint.cs(40):public static Point GetInteriorPoint(Geometry geom)
Algorithm\InteriorPoint.cs(62):public static Coordinate GetInteriorCoord(Geometry geom)
Algorithm\InteriorPoint.cs(105):public void Filter(Geometry elem)
Algorithm\InteriorPointArea.cs(76):public static Coordinate GetInteriorPoint(Geometry geom)
Algorithm\InteriorPointArea.cs(195):public void Process()
Algorithm\InteriorPointArea.cs(414):public static double GetScanLineY(Polygon poly)
Algorithm\InteriorPointLine.cs(24):public static Coordinate GetInteriorPoint(Geometry geom)
Algorithm\InteriorPointPoint.cs(21):public static Coordinate GetInteriorPoint(Geometry geom)
Algorithm\IntersectionComputer.cs(37):public static Coordinate Intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2)
Algorithm\IntersectionComputer.cs(106):public static Coordinate LineSegment(Coordinate line1, Coordinate line2, Coordinate seg1, Coordinate seg2)
Algorithm\Length.cs(20):public static double OfLine(CoordinateSequence pts)
Algorithm\LineIntersector.cs(68):public static double ComputeEdgeDistance(Coordinate p, Coordinate p0, Coordinate p1)
Algorithm\LineIntersector.cs(99):public static double NonRobustComputeEdgeDistance(Coordinate p, Coordinate p1, Coordinate p2)
Algorithm\LineIntersector.cs(187):public Coordinate GetEndpoint(int segmentIndex, int ptIndex)
Algorithm\LineIntersector.cs(214):public void ComputeIntersection(Coordinate p1, Coordinate p2, Coordinate p3, Coordinate p4)
Algorithm\LineIntersector.cs(281):public Coordinate GetIntersection(int intIndex)
Algorithm\LineIntersector.cs(306):public bool IsIntersection(Coordinate pt)
Algorithm\LineIntersector.cs(320):public bool IsInteriorIntersection()
Algorithm\LineIntersector.cs(335):public bool IsInteriorIntersection(int inputLineIndex)
Algorithm\LineIntersector.cs(370):public Coordinate GetIntersectionAlongSegment(int segmentIndex, int intIndex)
Algorithm\LineIntersector.cs(387):public int GetIndexAlongSegment(int segmentIndex, int intIndex)
Algorithm\LineIntersector.cs(422):public double GetEdgeDistance(int segmentIndex, int intIndex)
Algorithm\Locate\IndexedPointInAreaLocator.cs(51):public Location Locate(Coordinate p)
Algorithm\Locate\IndexedPointInAreaLocator.cs(107):public void VisitItem(LineSegment seg)
Algorithm\Locate\IndexedPointInAreaLocator.cs(148):public IList Query(double min, double max)
Algorithm\Locate\IndexedPointInAreaLocator.cs(156):public void Query(double min, double max, IItemVisitor<LineSegment> visitor)
Algorithm\Locate\IPointOnGeometryLocator.cs(34):public static bool Intersects(IPointOnGeometryLocator locator, Coordinate coordinate)
Algorithm\Locate\SimplePointInAreaLocator.cs(43):public static Location Locate(Coordinate p, Geometry geom)
Algorithm\Locate\SimplePointInAreaLocator.cs(67):public static bool IsContained(Coordinate p, Geometry geom)
Algorithm\Locate\SimplePointInAreaLocator.cs(121):public static bool ContainsPointInPolygon(Coordinate p, Polygon poly)
Algorithm\Locate\SimplePointInAreaLocator.cs(163):public Location Locate(Coordinate p)
Algorithm\Match\AreaSimilarityMeasure.cs(18):public static double measure(Geometry a, Geometry b)
Algorithm\Match\AreaSimilarityMeasure.cs(33):public double Measure(Geometry g1, Geometry g2)
Algorithm\Match\FrechetSimilarityMeasure.cs(33):public double Measure(Geometry g1, Geometry g2)
Algorithm\Match\HausdorffSimilarityMeasure.cs(23):public static double measure(Geometry a, Geometry b)
Algorithm\Match\HausdorffSimilarityMeasure.cs(36):public double Measure(Geometry g1, Geometry g2)
Algorithm\Match\HausdorffSimilarityMeasure.cs(56):public static double DiagonalSize(Envelope env)
Algorithm\Match\SimilarityMeasureCombiner.cs(17):public static double Combine(double measure1, double measure2)
Algorithm\MinimumBoundingCircle.cs(78):public Geometry GetCircle()
Algorithm\MinimumBoundingCircle.cs(107):public Geometry GetMaximumDiameter()
Algorithm\MinimumBoundingCircle.cs(137):public Geometry GetFarthestPoints()
Algorithm\MinimumBoundingCircle.cs(172):public Geometry GetDiameter()
Algorithm\MinimumBoundingCircle.cs(200):public Coordinate[] GetExtremalPoints()
Algorithm\MinimumBoundingCircle.cs(215):public Coordinate GetCentre()
Algorithm\MinimumBoundingCircle.cs(225):public double GetRadius()
Algorithm\MinimumDiameter.cs(40):public static Geometry GetMinimumRectangle(Geometry geom)
Algorithm\MinimumDiameter.cs(50):public static Geometry GetMinimumDiameter(Geometry geom)
Algorithm\MinimumDiameter.cs(280):public Geometry GetMinimumRectangle()
Algorithm\Orientation.cs(56):public static OrientationIndex Index(Coordinate p1, Coordinate p2, Coordinate q)
Algorithm\Orientation.cs(104):public static bool IsCCW(Coordinate[] ring)
Algorithm\Orientation.cs(126):public static bool IsCCW(CoordinateSequence ring)
Algorithm\Orientation.cs(240):public static bool IsCCWArea(Coordinate[] ring)
Algorithm\Orientation.cs(268):public static bool IsCCWArea(CoordinateSequence ring)
Algorithm\Orientation.cs(277):public static OrientationIndex ReOrient(OrientationIndex orientation)
Algorithm\PointLocation.cs(22):public static bool IsOnLine(Coordinate p, Coordinate[] line)
Algorithm\PointLocation.cs(48):public static bool IsOnLine(Coordinate p, CoordinateSequence line)
Algorithm\PointLocation.cs(80):public static bool IsInRing(Coordinate p, Coordinate[] ring)
Algorithm\PointLocation.cs(97):public static bool IsInRing(Coordinate p, CoordinateSequence ring)
Algorithm\PointLocation.cs(113):public static Location LocateInRing(Coordinate p, Coordinate[] ring)
Algorithm\PointLocation.cs(128):public static Location LocateInRing(Coordinate p, CoordinateSequence ring)
Algorithm\PointLocator.cs(52):public bool Intersects(Coordinate p, Geometry geom)
Algorithm\PointLocator.cs(63):public Location Locate(Coordinate p, Geometry geom)
Algorithm\RayCrossingCounter.cs(43):public static Location LocatePointInRing(Coordinate p, Coordinate[] ring)
Algorithm\RayCrossingCounter.cs(64):public static Location LocatePointInRing(Coordinate p, CoordinateSequence ring)
Algorithm\RayCrossingCounter.cs(101):public void CountSegment(Coordinate p1, Coordinate p2)
Algorithm\RectangleLineIntersector.cs(57):public bool Intersects(Coordinate p0, Coordinate p1)
Algorithm\RobustDeterminant.cs(32):public static int SignOfDet2x2(double x1, double y1, double x2, double y2)
Algorithm\RobustDeterminant.cs(46):public static int SignOfDet2x2(double x1, double y1, double x2, double y2)
Algorithm\RobustDeterminant.cs(78):public static int SignOfDet2x2(double x1, double y1, double x2, double y2)
Algorithm\RobustDeterminant.cs(417):public static int OrientationIndex(Coordinate p1, Coordinate p2, Coordinate q)
DataStructures\Interval.cs(50):public Interval ExpandedByValue(double p)
DataStructures\Interval.cs(93):public bool Equals(Interval other)
DataStructures\Interval.cs(129):public Interval ExpandedByInterval(Interval interval)
DataStructures\Interval.cs(151):public bool Overlaps(Interval interval)
DataStructures\Interval.cs(162):public bool Overlaps(double min, double max)
DataStructures\Interval.cs(173):public bool Contains(Interval interval)
DataStructures\Interval.cs(185):public bool Contains(double min, double max)
DataStructures\Interval.cs(195):public bool Contains(double p)
DataStructures\Interval.cs(206):public bool Intersects(Interval other)
DataStructures\Interval.cs(217):public bool Intersects(double min, double max)
DataStructures\Interval.cs(226):public static Interval Create()
DataStructures\Interval.cs(236):public static Interval Create(double value)
DataStructures\Interval.cs(248):public static Interval Create(double val1, double val2)
DataStructures\Interval.cs(260):public static Interval Create(Interval interval)
Densify\Densifier.cs(35):public static Geometry Densify(Geometry geom, double distanceTolerance)
Densify\Densifier.cs(132):public Geometry GetResultGeometry()
Dissolve\DissolveHalfEdge.cs(31):public void SetStart()
Dissolve\LineDissolver.cs(36):public static Geometry Dissolve(Geometry g)
Dissolve\LineDissolver.cs(63):public void Add(Geometry geometry)
Dissolve\LineDissolver.cs(78):public void Add(IEnumerable<Geometry> geometries)
Dissolve\LineDissolver.cs(111):public Geometry GetResult()
EdgeGraph\EdgeGraph.cs(86):public static bool IsValidEdge(Coordinate orig, Coordinate dest)
EdgeGraph\EdgeGraph.cs(121):public IEnumerable<HalfEdge> GetVertexEdges()
EdgeGraph\EdgeGraph.cs(133):public HalfEdge FindEdge(Coordinate orig, Coordinate dest)
EdgeGraph\EdgeGraphBuilder.cs(16):public static EdgeGraph Build(IEnumerable<Geometry> geoms)
EdgeGraph\EdgeGraphBuilder.cs(34):public EdgeGraph GetGraph()
EdgeGraph\EdgeGraphBuilder.cs(45):public void Add(Geometry geometry)
EdgeGraph\EdgeGraphBuilder.cs(60):public void Add(IEnumerable<Geometry> geometries)
EdgeGraph\HalfEdge.cs(47):public static HalfEdge Create(Coordinate p0, Coordinate p1)
EdgeGraph\HalfEdge.cs(69):public static HalfEdge Init(HalfEdge e0, HalfEdge e1)
EdgeGraph\HalfEdge.cs(217):public HalfEdge Find(Coordinate dest)
EdgeGraph\HalfEdge.cs(238):public bool Equals(Coordinate p0, Coordinate p1)
EdgeGraph\HalfEdge.cs(250):public void Insert(HalfEdge eAdd)
EdgeGraph\HalfEdge.cs(380):public int CompareTo(HalfEdge e)
EdgeGraph\HalfEdge.cs(404):public int CompareAngularDirection(HalfEdge e)
EdgeGraph\HalfEdge.cs(461):public string ToStringNode()
EdgeGraph\HalfEdge.cs(483):public int Degree()
EdgeGraph\HalfEdge.cs(505):public HalfEdge PrevNode()
EdgeGraph\MarkHalfEdge.cs(17):public static bool IsMarked(HalfEdge e)
EdgeGraph\MarkHalfEdge.cs(26):public static void Mark(HalfEdge e)
EdgeGraph\MarkHalfEdge.cs(36):public static void SetMark(HalfEdge e, bool isMarked)
EdgeGraph\MarkHalfEdge.cs(46):public static void SetMarkBoth(HalfEdge e, bool isMarked)
EdgeGraph\MarkHalfEdge.cs(56):public static void MarkBoth(HalfEdge e)
EdgeGraph\MarkHalfEdge.cs(74):public void Mark()
GeometriesGraph\Depth.cs(22):public static int DepthAtLocation(Location _location)
GeometriesGraph\Depth.cs(53):public int GetDepth(int geomIndex, Positions posIndex) =>
GeometriesGraph\Depth.cs(62):public int GetDepth(int geomIndex, Geometries.Position posIndex)
GeometriesGraph\Depth.cs(74):public void SetDepth(int geomIndex, Positions posIndex, int depthValue)
GeometriesGraph\Depth.cs(82):public void SetDepth(int geomIndex, Geometries.Position posIndex, int depthValue)
GeometriesGraph\Depth.cs(107):public Location GetLocation(int geomIndex, Positions posIndex)
GeometriesGraph\Depth.cs(116):public Location GetLocation(int geomIndex, Geometries.Position posIndex)
GeometriesGraph\Depth.cs(130):public void Add(int geomIndex, Positions posIndex, Location _location)
GeometriesGraph\Depth.cs(140):public bool IsNull()
GeometriesGraph\Depth.cs(158):public bool IsNull(int geomIndex)
GeometriesGraph\Depth.cs(170):public bool IsNull(int geomIndex, Positions posIndex) =>
GeometriesGraph\Depth.cs(179):public bool IsNull(int geomIndex, Geometries.Position posIndex)
GeometriesGraph\Depth.cs(188):public void Add(Label lbl)
GeometriesGraph\Depth.cs(211):public int GetDelta(int geomIndex)
GeometriesGraph\Depth.cs(224):public void Normalize()
GeometriesGraph\Depth.cs(274):public static int DepthAtLocation(Location location)
GeometriesGraph\Depth.cs(303):public int GetDepth(int geomIndex, Positions posIndex)
GeometriesGraph\Depth.cs(315):public void SetDepth(int geomIndex, Positions posIndex, int depthValue)
GeometriesGraph\Depth.cs(345):public Location GetLocation(int geomIndex, Positions posIndex)
GeometriesGraph\Depth.cs(359):public void Add(int geomIndex, Positions posIndex, Location location)
GeometriesGraph\Depth.cs(371):public bool IsNull()
GeometriesGraph\Depth.cs(384):public bool IsNull(int geomIndex)
GeometriesGraph\Depth.cs(396):public bool IsNull(int geomIndex, Positions posIndex)
GeometriesGraph\Depth.cs(406):public void Add(Label lbl)
GeometriesGraph\Depth.cs(436):public int GetDelta(int geomIndex)
GeometriesGraph\Depth.cs(450):public void Normalize()
GeometriesGraph\DirectedEdge.cs(20):public static int DepthFactor(Location currLocation, Location nextLocation)
GeometriesGraph\DirectedEdge.cs(105):public int GetDepth(Positions position) => GetDepth(new Geometries.Position((int)position));
GeometriesGraph\DirectedEdge.cs(112):public int GetDepth(Geometries.Position position)
GeometriesGraph\DirectedEdge.cs(123):public void SetDepth(Positions position, int depthVal) => SetDepth(new Geometries.Position((int)position), depthVal);
GeometriesGraph\DirectedEdge.cs(130):public void SetDepth(Geometries.Position position, int depthVal)
GeometriesGraph\DirectedEdge.cs(265):public void SetEdgeDepths(Positions position, int depth)
GeometriesGraph\DirectedEdge.cs(278):public void SetEdgeDepths(Geometries.Position position, int depth)
GeometriesGraph\DirectedEdge.cs(314):public void WriteEdge(StreamWriter outstream)
GeometriesGraph\DirectedEdgeStar.cs(47):public int GetOutgoingDegree()
GeometriesGraph\DirectedEdgeStar.cs(61):public int GetOutgoingDegree(EdgeRing er)
GeometriesGraph\DirectedEdgeStar.cs(74):public DirectedEdge GetRightmostEdge()
GeometriesGraph\DirectedEdgeStar.cs(133):public void MergeSymLabels()
GeometriesGraph\DirectedEdgeStar.cs(146):public void UpdateLabelling(Label nodeLabel)
GeometriesGraph\DirectedEdgeStar.cs(188):public void LinkResultDirectedEdges()
GeometriesGraph\DirectedEdgeStar.cs(241):public void LinkMinimalDirectedEdges(EdgeRing er)
GeometriesGraph\DirectedEdgeStar.cs(286):public void LinkAllDirectedEdges()
GeometriesGraph\DirectedEdgeStar.cs(313):public void FindCoveredLineEdges()
GeometriesGraph\DirectedEdgeStar.cs(372):public void ComputeDepths(DirectedEdge de)
GeometriesGraph\Edge.cs(21):public static void UpdateIM(Label label, IntersectionMatrix im)
GeometriesGraph\Edge.cs(94):public Coordinate GetCoordinate(int i)
GeometriesGraph\Edge.cs(233):public void AddIntersections(LineIntersector li, int segmentIndex, int geomIndex)
GeometriesGraph\Edge.cs(248):public void AddIntersection(LineIntersector li, int segmentIndex, int geomIndex, int intIndex)
GeometriesGraph\Edge.cs(376):public bool IsPointwiseEqual(Edge e)
GeometriesGraph\Edge.cs(405):public void Write(TextWriter outstream)
GeometriesGraph\Edge.cs(421):public void WriteReverse(TextWriter outstream)
GeometriesGraph\EdgeEnd.cs(135):public int CompareTo(EdgeEnd e)
GeometriesGraph\EdgeEnd.cs(158):public int CompareDirection(EdgeEnd e)
GeometriesGraph\EdgeEndStar.cs(43):abstract public void Insert(EdgeEnd e);
GeometriesGraph\EdgeEndStar.cs(84):public IEnumerator<EdgeEnd> GetEnumerator()
GeometriesGraph\EdgeEndStar.cs(107):public EdgeEnd GetNextCW(EdgeEnd ee)
GeometriesGraph\EdgeEndStar.cs(218):public bool IsAreaLabelsConsistent(GeometryGraph geometryGraph)
GeometriesGraph\EdgeEndStar.cs(266):public void PropagateSideLabels(int geomIndex)
GeometriesGraph\EdgeEndStar.cs(324):public int FindIndex(EdgeEnd eSearch)
GeometriesGraph\EdgeIntersection.cs(55):public int CompareTo(object obj)
GeometriesGraph\EdgeIntersection.cs(71):public int Compare(int segmentIndex, double dist)
GeometriesGraph\EdgeIntersection.cs(89):public bool IsEndPoint(int maxSegmentIndex)
GeometriesGraph\EdgeIntersection.cs(102):public void Write(StreamWriter outstream)
GeometriesGraph\EdgeIntersectionList.cs(38):public EdgeIntersection Add(Coordinate intPt, int segmentIndex, double dist)
GeometriesGraph\EdgeIntersectionList.cs(51):public IEnumerator<EdgeIntersection> GetEnumerator()
GeometriesGraph\EdgeIntersectionList.cs(61):public bool IsIntersection(Coordinate pt)
GeometriesGraph\EdgeIntersectionList.cs(74):public void AddEndpoints()
GeometriesGraph\EdgeIntersectionList.cs(88):public void AddSplitEdges(IList<Edge> edgeList)
GeometriesGraph\EdgeIntersectionList.cs(114):public Edge CreateSplitEdge(EdgeIntersection ei0, EdgeIntersection ei1)
GeometriesGraph\EdgeIntersectionList.cs(141):public void Write(StreamWriter outstream)
GeometriesGraph\EdgeList.cs(24):public void Remove(Edge e)
GeometriesGraph\EdgeList.cs(33):public void Add(Edge e)
GeometriesGraph\EdgeList.cs(45):public void AddAll(IEnumerable<Edge> edgeColl)
GeometriesGraph\EdgeList.cs(65):public Edge FindEqualEdge(Edge e)
GeometriesGraph\EdgeList.cs(78):public IEnumerator<Edge> GetEnumerator()
GeometriesGraph\EdgeList.cs(95):public Edge Get(int i)
GeometriesGraph\EdgeList.cs(108):public int FindEdgeIndex(Edge e)
GeometriesGraph\EdgeList.cs(120):public void Write(StreamWriter outstream)
GeometriesGraph\EdgeNodingValidator.cs(22):public static void CheckValid(IEnumerable<Edge> edges)
GeometriesGraph\EdgeNodingValidator.cs(33):public static IEnumerable<ISegmentString> ToSegmentStrings(IEnumerable<Edge> edges)
GeometriesGraph\EdgeNodingValidator.cs(56):public void CheckValid()
GeometriesGraph\EdgeRing.cs(62):public Coordinate GetCoordinate(int i)
GeometriesGraph\EdgeRing.cs(100):public void AddHole(EdgeRing ring)
GeometriesGraph\EdgeRing.cs(110):public Polygon ToPolygon(GeometryFactory geometryFactory)
GeometriesGraph\EdgeRing.cs(124):public void ComputeRing()
GeometriesGraph\EdgeRing.cs(142):abstract public DirectedEdge GetNext(DirectedEdge de);
GeometriesGraph\EdgeRing.cs(149):abstract public void SetEdgeRing(DirectedEdge de, EdgeRing er);
GeometriesGraph\EdgeRing.cs(220):public void SetInResult()
GeometriesGraph\EdgeRing.cs(298):public bool ContainsPoint(Coordinate p)
GeometriesGraph\GeometryGraph.cs(27):public static bool IsInBoundary(int boundaryCount)
GeometriesGraph\GeometryGraph.cs(39):public static Location DetermineBoundary(IBoundaryNodeRule boundaryNodeRule, int boundaryCount)
GeometriesGraph\GeometryGraph.cs(143):public Coordinate[] GetBoundaryPoints()
GeometriesGraph\GeometryGraph.cs(160):public Edge FindEdge(LineString line)
GeometriesGraph\GeometryGraph.cs(169):public void ComputeSplitEdges(IList<Edge> edgelist)
GeometriesGraph\GeometryGraph.cs(322):public void AddEdge(Edge e)
GeometriesGraph\GeometryGraph.cs(336):public void AddPoint(Coordinate pt)
GeometriesGraph\GeometryGraph.cs(349):public SegmentIntersector ComputeSelfNodes(LineIntersector li, bool computeRingSelfNodes)
GeometriesGraph\GeometryGraph.cs(374):public SegmentIntersector ComputeSelfNodes(LineIntersector li, bool computeRingSelfNodes, bool isDoneIfProperInt)
GeometriesGraph\GeometryGraph.cs(384):public SegmentIntersector ComputeEdgeIntersections(GeometryGraph g,
GeometriesGraph\GeometryGraph.cs(477):public Location Locate(Coordinate pt)
GeometriesGraph\GraphComponent.cs(121):public void UpdateIM(IntersectionMatrix im)
GeometriesGraph\Index\EdgeSetIntersector.cs(23):abstract public void ComputeIntersections(IList<Edge> edges, SegmentIntersector si, bool testAllSegments);
GeometriesGraph\Index\EdgeSetIntersector.cs(31):abstract public void ComputeIntersections(IList<Edge> edges0, IList<Edge> edges1, SegmentIntersector si);
GeometriesGraph\Index\MonotoneChain.cs(27):public void ComputeIntersections(MonotoneChain mc, SegmentIntersector si)
GeometriesGraph\Index\MonotoneChainEdge.cs(54):public double GetMinX(int chainIndex)
GeometriesGraph\Index\MonotoneChainEdge.cs(66):public double GetMaxX(int chainIndex)
GeometriesGraph\Index\MonotoneChainEdge.cs(78):public void ComputeIntersects(MonotoneChainEdge mce, SegmentIntersector si)
GeometriesGraph\Index\MonotoneChainEdge.cs(92):public void ComputeIntersectsForChain(int chainIndex0, MonotoneChainEdge mce, int chainIndex1, SegmentIntersector si)
GeometriesGraph\Index\MonotoneChainIndexer.cs(44):public int[] GetChainStartIndices(Coordinate[] pts)
GeometriesGraph\Index\MonotoneChainIndexer.cs(67):public int[] OLDGetChainStartIndices(Coordinate[] pts)
GeometriesGraph\Index\SegmentIntersector.cs(20):public static bool IsAdjacentSegments(int i1, int i2)
GeometriesGraph\Index\SegmentIntersector.cs(67):public void SetBoundaryNodes(IList<Node> bdyNodes0, IList<Node> bdyNodes1)
GeometriesGraph\Index\SegmentIntersector.cs(157):public void AddIntersections(Edge e0, int segIndex0, Edge e1, int segIndex1)
GeometriesGraph\Index\SweepLineEvent.cs(75):public bool IsSameLabel(SweepLineEvent ev)
GeometriesGraph\Index\SweepLineEvent.cs(90):public int CompareTo(object o)
GeometriesGraph\Index\SweepLineSegment.cs(57):public void ComputeIntersections(SweepLineSegment ss, SegmentIntersector si)
GeometriesGraph\Label.cs(34):public static Label ToLineLabel(Label label)
GeometriesGraph\Label.cs(123):public Location GetLocation(int geomIndex, Positions posIndex)
GeometriesGraph\Label.cs(132):public Location GetLocation(int geomIndex, Geometries.Position posIndex)
GeometriesGraph\Label.cs(142):public Location GetLocation(int geomIndex)
GeometriesGraph\Label.cs(154):public void SetLocation(int geomIndex, Positions posIndex, Location _location) =>
GeometriesGraph\Label.cs(162):public void SetLocation(int geomIndex, Geometries.Position posIndex, Location _location)
GeometriesGraph\Label.cs(172):public void SetLocation(int geomIndex, Location _location)
GeometriesGraph\Label.cs(284):public bool IsArea(int geomIndex)
GeometriesGraph\Node.cs(58):public bool IsIncidentEdgeInResult()
GeometriesGraph\Node.cs(81):public void Add(EdgeEnd e)
GeometriesGraph\Node.cs(92):public void MergeLabel(Node n)
GeometriesGraph\Node.cs(104):public void MergeLabel(Label label)
GeometriesGraph\Node.cs(120):public void SetLabel(int argIndex, Location onLocation)
GeometriesGraph\Node.cs(132):public void SetLabelBoundary(int argIndex)
GeometriesGraph\Node.cs(166):public Location ComputeMergedLocation(Label label2, int eltIndex)
GeometriesGraph\Node.cs(183):public void Write(TextWriter outstream)
GeometriesGraph\NodeMap.cs(29):public Node AddNode(Coordinate coord)
GeometriesGraph\NodeMap.cs(48):public Node AddNode(Node n)
GeometriesGraph\NodeMap.cs(66):public void Add(EdgeEnd e)
GeometriesGraph\NodeMap.cs(80):public Node Find(Coordinate coord)
GeometriesGraph\NodeMap.cs(92):public IEnumerator<Node> GetEnumerator()
GeometriesGraph\NodeMap.cs(107):public IList<Node> GetBoundaryNodes(int geomIndex)
GeometriesGraph\NodeMap.cs(122):public void Write(StreamWriter outstream)
GeometriesGraph\PlanarGraph.cs(29):public static void LinkResultDirectedEdges(IList<Node> nodes)
GeometriesGraph\PlanarGraph.cs(71):public IEnumerator<Edge> GetEdgeEnumerator()
GeometriesGraph\PlanarGraph.cs(89):public bool IsBoundaryNode(int geomIndex, Coordinate coord)
GeometriesGraph\PlanarGraph.cs(113):public void Add(EdgeEnd e)
GeometriesGraph\PlanarGraph.cs(123):public IEnumerator<Node> GetNodeEnumerator()
GeometriesGraph\PlanarGraph.cs(140):public Node AddNode(Node node)
GeometriesGraph\PlanarGraph.cs(150):public Node AddNode(Coordinate coord)
GeometriesGraph\PlanarGraph.cs(162):public Node Find(Coordinate coord)
GeometriesGraph\PlanarGraph.cs(172):public void AddEdges(IList<Edge> edgesToAdd)
GeometriesGraph\PlanarGraph.cs(194):public void LinkResultDirectedEdges()
GeometriesGraph\PlanarGraph.cs(205):public void LinkAllDirectedEdges()
GeometriesGraph\PlanarGraph.cs(217):public EdgeEnd FindEdgeEnd(Edge e)
GeometriesGraph\PlanarGraph.cs(230):public Edge FindEdge(Coordinate p0, Coordinate p1)
GeometriesGraph\PlanarGraph.cs(249):public Edge FindEdgeInSameDirection(Coordinate p0, Coordinate p1)
GeometriesGraph\PlanarGraph.cs(286):public void WriteEdges(StreamWriter outstream)
GeometriesGraph\Position.cs(46):public static Positions Opposite(Positions position)
GeometriesGraph\QuadrantOp.cs(47):public static int Quadrant(double dx, double dy)
GeometriesGraph\QuadrantOp.cs(68):public static int Quadrant(Coordinate p0, Coordinate p1)
GeometriesGraph\QuadrantOp.cs(89):public static bool IsOpposite(int quad1, int quad2)
GeometriesGraph\QuadrantOp.cs(106):public static int CommonHalfPlane(int quad1, int quad2)
GeometriesGraph\QuadrantOp.cs(132):public static bool IsInHalfPlane(int quad, int halfPlane)
GeometriesGraph\QuadrantOp.cs(143):public static bool IsNorthern(int quad)
GeometriesGraph\TopologyLocation.cs(100):public Location Get(Positions posIndex) =>
GeometriesGraph\TopologyLocation.cs(108):public Location Get(Geometries.Position posIndex)
GeometriesGraph\TopologyLocation.cs(229):public void SetLocation(Positions locIndex, Location locValue) =>
GeometriesGraph\TopologyLocation.cs(237):public void SetLocation(Geometries.Position locIndex, Location locValue)
Geometries\Coordinate.cs(258):public bool Equals2D(Coordinate other)
Geometries\Coordinate.cs(271):public bool Equals2D(Coordinate c, double tolerance)
Geometries\Coordinate.cs(290):public bool Equals(Coordinate other)
Geometries\Coordinate.cs(308):public int CompareTo(object o)
Geometries\Coordinate.cs(334):public int CompareTo(Coordinate other)
Geometries\Coordinate.cs(382):public double Distance(Coordinate c)
Geometries\CoordinateArrays.cs(19):public static int Dimension(Coordinate[] pts)
Geometries\CoordinateArrays.cs(38):public static int Measures(Coordinate[] pts)
Geometries\CoordinateArrays.cs(61):public static void EnforceConsistency(Coordinate[] array)
Geometries\CoordinateArrays.cs(121):public static Coordinate[] EnforceConsistency(Coordinate[] array, int dimension, int measures)
Geometries\CoordinateArrays.cs(167):public static bool IsRing(Coordinate[] pts)
Geometries\CoordinateArrays.cs(186):public static Coordinate PointNotInList(Coordinate[] testPts, Coordinate[] pts)
Geometries\CoordinateArrays.cs(205):public static int Compare(Coordinate[] pts1, Coordinate[] pts2)
Geometries\CoordinateArrays.cs(238):public static int IncreasingDirection(Coordinate[] pts)
Geometries\CoordinateArrays.cs(276):public static Coordinate[] CopyDeep(Coordinate[] coordinates)
Geometries\CoordinateArrays.cs(296):public static void CopyDeep(Coordinate[] src, int srcStart, Coordinate[] dest, int destStart, int length)
Geometries\CoordinateArrays.cs(311):public static Coordinate[] ToCoordinateArray(IEnumerable<Coordinate> coordList)
Geometries\CoordinateArrays.cs(322):public static bool HasRepeatedPoints(Coordinate[] coord)
Geometries\CoordinateArrays.cs(341):public static Coordinate[] AtLeastNCoordinatesOrNothing(int n, Coordinate[] c)
Geometries\CoordinateArrays.cs(353):public static Coordinate[] RemoveRepeatedPoints(Coordinate[] coord)
Geometries\CoordinateArrays.cs(367):public static bool HasRepeatedOrInvalidPoints(Coordinate[] coord)
Geometries\CoordinateArrays.cs(393):public static Coordinate[] RemoveRepeatedOrInvalidPoints(Coordinate[] coord)
Geometries\CoordinateArrays.cs(409):public static Coordinate[] RemoveNull(Coordinate[] coord)
Geometries\CoordinateArrays.cs(424):public static void Reverse(Coordinate[] coord)
Geometries\CoordinateArrays.cs(436):public static bool Equals(Coordinate[] coord1, Coordinate[] coord2)
Geometries\CoordinateArrays.cs(462):public int Compare(Coordinate[] pts1, Coordinate[] pts2)
Geometries\CoordinateArrays.cs(482):public int Compare(Coordinate[] pts1, Coordinate[] pts2)
Geometries\CoordinateArrays.cs(502):public int OldCompare(Coordinate[] pts1, Coordinate[] pts2)
Geometries\CoordinateArrays.cs(541):public static bool Equals(Coordinate[] coord1, Coordinate[] coord2,
Geometries\CoordinateArrays.cs(560):public static Coordinate MinCoordinate(Coordinate[] coordinates)
Geometries\CoordinateArrays.cs(574):public static void Scroll(Coordinate[] coordinates, Coordinate firstCoordinate)
Geometries\CoordinateArrays.cs(586):public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate)
Geometries\CoordinateArrays.cs(602):public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate, bool ensureRing)
Geometries\CoordinateArrays.cs(635):public static int IndexOf(Coordinate coordinate, Coordinate[] coordinates)
Geometries\CoordinateArrays.cs(657):public static Coordinate[] Extract(Coordinate[] pts, int start, int end)
Geometries\CoordinateArrays.cs(683):public static Envelope Envelope(Coordinate[] coordinates)
Geometries\CoordinateArrays.cs(700):public static Coordinate[] Intersection(Coordinate[] coordinates, Envelope env)
Geometries\CoordinateEqualityComparer.cs(29):public bool Equals(Coordinate x, Coordinate y, double tolerance)
Geometries\CoordinateList.cs(77):public Coordinate GetCoordinate(int i)
Geometries\CoordinateList.cs(90):public bool Add(Coordinate[] coord, bool allowRepeated, int start, int end)
Geometries\CoordinateList.cs(109):public bool Add(Coordinate[] coord, bool allowRepeated, bool direction)
Geometries\CoordinateList.cs(126):public bool Add(Coordinate[] coord, bool allowRepeated)
Geometries\CoordinateList.cs(137):public bool Add(object obj, bool allowRepeated)
Geometries\CoordinateList.cs(148):public bool Add(Coordinate coord, bool allowRepeated)
Geometries\CoordinateList.cs(170):public void Add(int i, Coordinate coord, bool allowRepeated)
Geometries\CoordinateList.cs(199):public bool AddAll(IEnumerable<Coordinate> coll, bool allowRepeated)
Geometries\CoordinateList.cs(213):public void CloseRing()
Geometries\CoordinateList.cs(223):public Coordinate[] ToCoordinateArray()
Geometries\CoordinateList.cs(234):public Coordinate[] ToCoordinateArray(bool isForward)
Geometries\CoordinateList.cs(254):public object Clone()
Geometries\Coordinates.cs(13):public static Coordinate Create(int dimension)
Geometries\Coordinates.cs(24):public static Coordinate Create(int dimension, int measures)
Geometries\Coordinates.cs(52):public static int Dimension(Coordinate coordinate)
Geometries\Coordinates.cs(93):public static int Measures(Coordinate coordinate)
Geometries\CoordinateSequence.cs(329):public double GetOrdinate(int index, Ordinate ordinate)
Geometries\CoordinateSequence.cs(378):public void SetOrdinate(int index, Ordinate ordinate, double value)
Geometries\CoordinateSequence.cs(463):public bool TryGetOrdinateIndex(Ordinate ordinate, out int ordinateIndex)
Geometries\CoordinateSequenceComparator.cs(27):public static int Compare(double a, double b)
Geometries\CoordinateSequenceComparator.cs(70):public int Compare(object o1, object o2)
Geometries\CoordinateSequenceComparator.cs(102):public int Compare(CoordinateSequence s1, CoordinateSequence s2)
Geometries\CoordinateSequenceFactory.cs(115):public CoordinateSequence Create(int size, int dimension) => Create(size, dimension, 0);
Geometries\CoordinateSequences.cs(18):public static void Reverse(CoordinateSequence seq)
Geometries\CoordinateSequences.cs(34):public static void Swap(CoordinateSequence seq, int i, int j)
Geometries\CoordinateSequences.cs(57):public static void Copy(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos, int length)
Geometries\CoordinateSequences.cs(122):public static bool TryRawCopy(PackedFloatCoordinateSequence src, int srcPos, PackedFloatCoordinateSequence dest, int destPos, int length)
Geometries\CoordinateSequences.cs(188):public static void CopyCoord(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos)
Geometries\CoordinateSequences.cs(228):public static bool IsRing(CoordinateSequence seq)
Geometries\CoordinateSequences.cs(251):public static CoordinateSequence EnsureValidRing(CoordinateSequenceFactory fact, CoordinateSequence seq)
Geometries\CoordinateSequences.cs(291):public static CoordinateSequence Extend(CoordinateSequenceFactory fact, CoordinateSequence seq, int size)
Geometries\CoordinateSequences.cs(316):public static bool IsEqual(CoordinateSequence seq1, CoordinateSequence seq2)
Geometries\CoordinateSequences.cs(345):public static bool IsEqualAt(CoordinateSequence seq1, int pos1, CoordinateSequence seq2, int pos2)
Geometries\CoordinateSequences.cs(395):public static string ToString(CoordinateSequence cs)
Geometries\CoordinateSequences.cs(422):public static Coordinate MinCoordinate(CoordinateSequence seq)
Geometries\CoordinateSequences.cs(442):public static int MinCoordinateIndex(CoordinateSequence seq)
Geometries\CoordinateSequences.cs(457):public static int MinCoordinateIndex(CoordinateSequence seq, int from, int to)
Geometries\CoordinateSequences.cs(478):public static void Scroll(CoordinateSequence seq, Coordinate firstCoordinate)
Geometries\CoordinateSequences.cs(491):public static void Scroll(CoordinateSequence seq, int indexOfFirstCoordinate)
Geometries\CoordinateSequences.cs(503):public static void Scroll(CoordinateSequence seq, int indexOfFirstCoordinate, bool ensureRing)
Geometries\CoordinateSequences.cs(538):public static int IndexOf(Coordinate coordinate, CoordinateSequence seq)
Geometries\CoordinateZ.cs(149):public bool Equals3D(CoordinateZ other)
Geometries\CoordinateZ.cs(161):public bool EqualInZ(CoordinateZ c, double tolerance)
Geometries\CoordinateZ.cs(188):public double Distance3D(CoordinateZ c)
Geometries\Dimension.cs(117):public static char ToDimensionSymbol(Dimension dimensionValue)
Geometries\Dimension.cs(147):public static Dimension ToDimensionValue(char dimensionSymbol)
Geometries\Envelope.cs(32):public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q)
Geometries\Envelope.cs(48):public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2)
Geometries\Envelope.cs(166):public void Init()
Geometries\Envelope.cs(178):public void Init(double x1, double x2, double y1, double y2)
Geometries\Envelope.cs(211):public void Init(Coordinate p1, Coordinate p2)
Geometries\Envelope.cs(220):public void Init(Coordinate p)
Geometries\Envelope.cs(229):public void Init(Envelope env)
Geometries\Envelope.cs(240):public void SetToNull()
Geometries\Envelope.cs(365):public void ExpandBy(double distance)
Geometries\Envelope.cs(376):public void ExpandBy(double deltaX, double deltaY)
Geometries\Envelope.cs(429):public void ExpandToInclude(Coordinate p)
Geometries\Envelope.cs(441):public void ExpandToInclude(double x, double y)
Geometries\Envelope.cs(473):public void ExpandToInclude(Envelope other)
Geometries\Envelope.cs(504):public Envelope ExpandedBy(Envelope other)
Geometries\Envelope.cs(522):public void Translate(double transX, double transY)
Geometries\Envelope.cs(552):public Envelope Intersection(Envelope env)
Geometries\Envelope.cs(573):public bool Intersects(Envelope other)
Geometries\Envelope.cs(585):public bool Intersects(Coordinate p)
Geometries\Envelope.cs(596):public bool Intersects(double x, double y)
Geometries\Envelope.cs(608):public bool Intersects(Coordinate a, Coordinate b)
Geometries\Envelope.cs(634):public bool Disjoint(Envelope other)
Geometries\Envelope.cs(653):public bool Contains(Envelope other)
Geometries\Envelope.cs(668):public bool Contains(Coordinate p)
Geometries\Envelope.cs(685):public bool Contains(double x, double y)
Geometries\Envelope.cs(696):public bool Covers(double x, double y)
Geometries\Envelope.cs(710):public bool Covers(Coordinate p)
Geometries\Envelope.cs(720):public bool Covers(Envelope other)
Geometries\Envelope.cs(737):public double Distance(Envelope env)
Geometries\Envelope.cs(774):public bool Equals(Envelope other)
Geometries\Envelope.cs(790):public int CompareTo(object o)
Geometries\Envelope.cs(804):public int CompareTo(Envelope env)
Geometries\Envelope.cs(867):public Envelope Copy()
Geometries\Envelope.cs(882):public static Envelope Parse(string envelope)
Geometries\Geometry.cs(299):public static bool HasNullElements(object[] array)
Geometries\Geometry.cs(312):public static bool HasNullElements<T>(IEnumerable<T> array) where T:class
Geometries\Geometry.cs(625):public void Filter(Geometry geom)
Geometries\Geometry.cs(640):public void GeometryChanged()
Geometries\Geometry.cs(650):public void GeometryChangedAction()
Geometries\Geometry.cs(668):public bool Disjoint(Geometry g)
Geometries\Geometry.cs(826):public bool Within(Geometry g)
Geometries\Geometry.cs(998):public bool CoveredBy(Geometry g)
Geometries\Geometry.cs(1062):public bool Equals(Geometry g)
Geometries\Geometry.cs(1224):public string ToText()
Geometries\Geometry.cs(1234):public string AsText()
Geometries\Geometry.cs(1245):public byte[] ToBinary()
Geometries\Geometry.cs(1255):public byte[] AsBinary()
Geometries\Geometry.cs(1265):public XmlReader ToGMLFeature()
Geometries\Geometry.cs(1299):public Geometry Buffer(double distance)
Geometries\Geometry.cs(1333):public Geometry Buffer(double distance, EndCapStyle endCapStyle)
Geometries\Geometry.cs(1370):public Geometry Buffer(double distance, int quadrantSegments)
Geometries\Geometry.cs(1414):public Geometry Buffer(double distance, int quadrantSegments, EndCapStyle endCapStyle)
Geometries\Geometry.cs(1459):public Geometry Buffer(double distance, BufferParameters bufferParameters)
Geometries\Geometry.cs(1518):public Geometry Intersection(Geometry other)
Geometries\Geometry.cs(1559):public Geometry Union(Geometry other)
Geometries\Geometry.cs(1579):public Geometry Difference(Geometry other)
Geometries\Geometry.cs(1600):public Geometry SymmetricDifference(Geometry other)
Geometries\Geometry.cs(1622):public Geometry Union()
Geometries\Geometry.cs(1680):public bool EqualsExact(Geometry other)
Geometries\Geometry.cs(1704):public bool EqualsNormalized(Geometry g)
Geometries\Geometry.cs(1785):public Geometry Copy()
Geometries\Geometry.cs(1831):public Geometry Normalized()
Geometries\Geometry.cs(1865):public int CompareTo(object o)
Geometries\Geometry.cs(1897):public int CompareTo(Geometry geom)
Geometries\Geometry.cs(1943):public int CompareTo(object o, IComparer<CoordinateSequence> comp)
Geometries\Geometry.cs(2189):public void Filter(CoordinateSequence seq, int i)
Geometries\GeometryCollection.cs(462):public IEnumerator<Geometry> GetEnumerator()
Geometries\GeometryCollectionEnumerator.cs(78):public bool MoveNext()
Geometries\GeometryCollectionEnumerator.cs(127):public void Reset()
Geometries\GeometryCollectionEnumerator.cs(144):public void Dispose()
Geometries\GeometryCollectionEnumerator.cs(153):public IEnumerator<Geometry> GetEnumerator()
Geometries\GeometryComponentFilter.cs(26):public void Filter(Geometry geom)
Geometries\GeometryFactory.cs(106):public static Point CreatePointFromInternalCoord(Coordinate coord, Geometry exemplar)
Geometries\GeometryFactory.cs(178):public static Point[] ToPointArray(IEnumerable<Geometry> points)
Geometries\GeometryFactory.cs(192):public static Geometry[] ToGeometryArray(IEnumerable<Geometry> geometries)
Geometries\GeometryFactory.cs(202):public static LineString[] ToLineStringArray(IEnumerable<Geometry> lineStrings)
Geometries\GeometryFactory.cs(212):public static LinearRing[] ToLinearRingArray(IEnumerable<Geometry> linearRings)
Geometries\GeometryFactory.cs(222):public static Polygon[] ToPolygonArray(IEnumerable<Geometry> polygons)
Geometries\GeometryFactory.cs(232):public static MultiPoint[] ToMultiPointArray(IEnumerable<Geometry> multiPoints)
Geometries\GeometryFactory.cs(242):public static MultiLineString[] ToMultiLineStringArray(IEnumerable<Geometry> multiLineStrings)
Geometries\GeometryFactory.cs(252):public static MultiPolygon[] ToMultiPolygonArray(IEnumerable<Geometry> multiPolygons)
Geometries\GeometryFactory.cs(318):public Point CreatePoint()
Geometries\GeometryFactory.cs(329):public Point CreatePoint(Coordinate coordinate)
Geometries\GeometryFactory.cs(349):public LineString CreateLineString()
Geometries\GeometryFactory.cs(360):public LineString CreateLineString(Coordinate[] coordinates)
Geometries\GeometryFactory.cs(378):public LinearRing CreateLinearRing()
Geometries\GeometryFactory.cs(390):public LinearRing CreateLinearRing(Coordinate[] coordinates)
Geometries\GeometryFactory.cs(410):public Polygon CreatePolygon()
Geometries\GeometryFactory.cs(476):public MultiPoint CreateMultiPoint()
Geometries\GeometryFactory.cs(498):public MultiPoint CreateMultiPointFromCoords(Coordinate[] coordinates)
Geometries\GeometryFactory.cs(509):public MultiPoint CreateMultiPoint(CoordinateSequence coordinates)
Geometries\GeometryFactory.cs(526):public MultiLineString CreateMultiLineString()
Geometries\GeometryFactory.cs(544):public MultiPolygon CreateMultiPolygon()
Geometries\GeometryFactory.cs(564):public GeometryCollection CreateGeometryCollection()
Geometries\GeometryFactory.cs(668):public Geometry CreateEmpty(Dimension dimension)
Geometries\Implementation\DotSpatialAffineCoordinateSequence.cs(447):public void ReleaseCoordinateArray()
Geometries\Implementation\DotSpatialAffineCoordinateSequenceFactory.cs(72):public CoordinateSequence Create(double[] xy)
Geometries\Implementation\DotSpatialAffineCoordinateSequenceFactory.cs(85):public CoordinateSequence Create(double[] xy, double[] zm, bool isMeasure = false)
Geometries\Implementation\DotSpatialAffineCoordinateSequenceFactory.cs(99):public CoordinateSequence Create(double[] xy, double[] z, double[] m)
Geometries\Implementation\PackedCoordinateSequence.cs(79):public void ReleaseCoordinateArray()
Geometries\Implementation\PackedCoordinateSequence.cs(283):public double[] GetRawCoordinates()
Geometries\Implementation\PackedCoordinateSequence.cs(505):public float[] GetRawCoordinates()
Geometries\Implementation\PackedCoordinateSequenceFactory.cs(113):public CoordinateSequence Create(double[] packedCoordinates, int dimension)
Geometries\Implementation\PackedCoordinateSequenceFactory.cs(126):public CoordinateSequence Create(double[] packedCoordinates, int dimension, int measures)
Geometries\Implementation\PackedCoordinateSequenceFactory.cs(141):public CoordinateSequence Create(float[] packedCoordinates, int dimension)
Geometries\Implementation\PackedCoordinateSequenceFactory.cs(154):public CoordinateSequence Create(float[] packedCoordinates, int dimension, int measures)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(85):public static RawCoordinateSequence CreateXY(Memory<double> x, Memory<double> y)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(117):public static RawCoordinateSequence CreateXY(Memory<double> xy)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(152):public static RawCoordinateSequence CreateXYZ(Memory<double> x, Memory<double> y, Memory<double> z)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(189):public static RawCoordinateSequence CreateXYZ(Memory<double> xy, Memory<double> z)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(226):public static RawCoordinateSequence CreateXYZ(Memory<double> xyz)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(261):public static RawCoordinateSequence CreateXYM(Memory<double> x, Memory<double> y, Memory<double> m)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(298):public static RawCoordinateSequence CreateXYM(Memory<double> xy, Memory<double> m)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(335):public static RawCoordinateSequence CreateXYM(Memory<double> xym)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(374):public static RawCoordinateSequence CreateXYZM(Memory<double> x, Memory<double> y, Memory<double> z, Memory<double> m)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(415):public static RawCoordinateSequence CreateXYZM(Memory<double> xy, Memory<double> z, Memory<double> m)
Geometries\Implementation\RawCoordinateSequenceFactory.cs(452):public static RawCoordinateSequence CreateXYZM(Memory<double> xyzm)
Geometries\IntersectionMatrix.cs(97):public void Add(IntersectionMatrix im)
Geometries\IntersectionMatrix.cs(112):public static bool IsTrue(Dimension actualDimensionValue)
Geometries\IntersectionMatrix.cs(136):public static bool Matches(Dimension actualDimensionValue, char requiredDimensionSymbol)
Geometries\IntersectionMatrix.cs(169):public static bool Matches(string actualDimensionSymbols, string requiredDimensionSymbols)
Geometries\IntersectionMatrix.cs(187):public void Set(Location row, Location column, Dimension dimensionValue)
Geometries\IntersectionMatrix.cs(200):public void Set(string dimensionSymbols)
Geometries\IntersectionMatrix.cs(226):public void SetAtLeast(Location row, Location column, Dimension minimumDimensionValue)
Geometries\IntersectionMatrix.cs(239):public void SetAtLeastIfValid(Location row, Location column, Dimension minimumDimensionValue)
Geometries\IntersectionMatrix.cs(255):public void SetAtLeast(string minimumDimensionSymbols)
Geometries\IntersectionMatrix.cs(272):public void SetAll(Dimension dimensionValue)
Geometries\IntersectionMatrix.cs(292):public Dimension Get(Location row, Location column)
Geometries\IntersectionMatrix.cs(319):public bool IsDisjoint()
Geometries\IntersectionMatrix.cs(335):public bool IsIntersects()
Geometries\IntersectionMatrix.cs(351):public bool IsTouches(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB)
Geometries\IntersectionMatrix.cs(397):public bool IsCrosses(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB)
Geometries\IntersectionMatrix.cs(421):public bool IsWithin()
Geometries\IntersectionMatrix.cs(432):public bool IsContains()
Geometries\IntersectionMatrix.cs(447):public bool IsCovers()
Geometries\IntersectionMatrix.cs(467):public bool IsCoveredBy()
Geometries\IntersectionMatrix.cs(497):public bool IsEquals(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB)
Geometries\IntersectionMatrix.cs(524):public bool IsOverlaps(Dimension dimensionOfGeometryA, Dimension dimensionOfGeometryB)
Geometries\IntersectionMatrix.cs(552):public bool Matches(string pattern)
Geometries\IntersectionMatrix.cs(568):public IntersectionMatrix Transpose()
Geometries\LineSegment.cs(80):public Coordinate GetCoordinate(int i)
Geometries\LineSegment.cs(89):public void SetCoordinates(LineSegment ls)
Geometries\LineSegment.cs(99):public void SetCoordinates(Coordinate p0, Coordinate p1)
Geometries\LineSegment.cs(162):public int OrientationIndex(LineSegment seg)
Geometries\LineSegment.cs(189):public int OrientationIndex(Coordinate p)
Geometries\LineSegment.cs(197):public void Reverse()
Geometries\LineSegment.cs(209):public void Normalize()
Geometries\LineSegment.cs(234):public double Distance(LineSegment ls)
Geometries\LineSegment.cs(242):public double Distance(Coordinate p)
Geometries\LineSegment.cs(253):public double DistancePerpendicular(Coordinate p)
Geometries\LineSegment.cs(270):public Coordinate PointAlong(double segmentLengthFraction)
Geometries\LineSegment.cs(293):public Coordinate PointAlongOffset(double segmentLengthFraction, double offsetDistance)
Geometries\LineSegment.cs(332):public double ProjectionFactor(Coordinate p)
Geometries\LineSegment.cs(372):public double SegmentFraction(Coordinate inputPt)
Geometries\LineSegment.cs(390):public Coordinate Project(Coordinate p)
Geometries\LineSegment.cs(409):public LineSegment Project(LineSegment seg)
Geometries\LineSegment.cs(438):public LineSegment Offset(double offsetDistance)
Geometries\LineSegment.cs(452):public Coordinate ClosestPoint(Coordinate p)
Geometries\LineSegment.cs(469):public Coordinate[] ClosestPoints(LineSegment line)
Geometries\LineSegment.cs(526):public Coordinate Reflect(Coordinate p)
Geometries\LineSegment.cs(557):public Coordinate Intersection(LineSegment line)
Geometries\LineSegment.cs(579):public Coordinate LineIntersection(LineSegment line)
Geometries\LineSegment.cs(598):public LineString ToGeometry(GeometryFactory geomFactory)
Geometries\LineSegment.cs(654):public int CompareTo(LineSegment other)
Geometries\LineSegment.cs(674):public bool EqualsTopologically(LineSegment other)
Geometries\LineString.cs(135):public Coordinate GetCoordinateN(int n)
Geometries\LineString.cs(187):public Point GetPointN(int n)
Geometries\Location.cs(51):public static char ToLocationSymbol(Location locationValue)
Geometries\OctogonalEnvelope.cs(23):public static Geometry GetOctagonalEnvelope(Geometry geom)
Geometries\OctogonalEnvelope.cs(159):public void ExpandToInclude(Geometry g)
Geometries\OctogonalEnvelope.cs(169):public OctagonalEnvelope ExpandToInclude(CoordinateSequence seq)
Geometries\OctogonalEnvelope.cs(185):public OctagonalEnvelope ExpandToInclude(OctagonalEnvelope oct)
Geometries\OctogonalEnvelope.cs(217):public OctagonalEnvelope ExpandToInclude(Coordinate p)
Geometries\OctogonalEnvelope.cs(228):public OctagonalEnvelope ExpandToInclude(Envelope env)
Geometries\OctogonalEnvelope.cs(243):public OctagonalEnvelope ExpandToInclude(double x, double y)
Geometries\OctogonalEnvelope.cs(273):public void ExpandBy(double distance)
Geometries\OctogonalEnvelope.cs(313):public bool Intersects(OctagonalEnvelope other)
Geometries\OctogonalEnvelope.cs(333):public bool Intersects(Coordinate p)
Geometries\OctogonalEnvelope.cs(354):public bool Contains(OctagonalEnvelope other)
Geometries\OctogonalEnvelope.cs(373):public Geometry ToGeometry(GeometryFactory geomFactory)
Geometries\OctogonalEnvelope.cs(440):public void Filter(Geometry geom)
Geometries\OrdinatesUtility.cs(13):public static int OrdinatesToDimension(Ordinates ordinates)
Geometries\OrdinatesUtility.cs(30):public static int OrdinatesToMeasures(Ordinates ordinates)
Geometries\Polygon.cs(271):public LineString GetInteriorRingN(int n)
Geometries\Polygon.cs(668):public static int GetHashCode(this CoordinateSequence sequence, int baseValue, Func<int, int> operation)
Geometries\PrecisionModel.cs(65):public static PrecisionModel MostPrecise(PrecisionModel pm1, PrecisionModel pm2)
Geometries\PrecisionModel.cs(270)://public PrecisionModels GetPrecisionModelType()
Geometries\PrecisionModel.cs(291):public double MakePrecise(double val)
Geometries\PrecisionModel.cs(319):public void MakePrecise(Coordinate coord)
Geometries\PrecisionModel.cs(377):public bool Equals(PrecisionModel otherPrecisionModel)
Geometries\PrecisionModel.cs(421):public int CompareTo(object o)
Geometries\PrecisionModel.cs(431):public int CompareTo(PrecisionModel other)
Geometries\Prepared\BasicPreparedGeometry.cs(44):public bool IsAnyTargetComponentInTest(Geometry testGeom)
Geometries\Prepared\BasicPreparedGeometry.cs(175):public bool Disjoint(Geometry g)
Geometries\Prepared\PreparedGeometryFactory.cs(22):public static IPreparedGeometry Prepare(Geometry geom)
Geometries\Prepared\PreparedGeometryFactory.cs(34):public IPreparedGeometry Create(Geometry geom)
Geometries\Prepared\PreparedLineStringIntersects.cs(24):public static bool Intersects(PreparedLineString prep, Geometry geom)
Geometries\Prepared\PreparedLineStringIntersects.cs(46):public bool Intersects(Geometry geom)
Geometries\Prepared\PreparedPolygonContains.cs(23):public static bool Contains(PreparedPolygon prep, Geometry geom)
Geometries\Prepared\PreparedPolygonContains.cs(43):public bool Contains(Geometry geom)
Geometries\Prepared\PreparedPolygonContainsProperly.cs(31):public static bool ContainsProperly(PreparedPolygon prep, Geometry geom)
Geometries\Prepared\PreparedPolygonContainsProperly.cs(51):public bool ContainsProperly(Geometry geom)
Geometries\Prepared\PreparedPolygonCovers.cs(21):public static bool Covers(PreparedPolygon prep, Geometry geom)
Geometries\Prepared\PreparedPolygonCovers.cs(42):public bool Covers(Geometry geom)
Geometries\Prepared\PreparedPolygonIntersects.cs(20):public static bool Intersects(PreparedPolygon prep, Geometry geom)
Geometries\Prepared\PreparedPolygonIntersects.cs(38):public bool Intersects(Geometry geom)
Geometries\Quadrant.cs(136):public bool IsOpposite(Quadrant quad)
Geometries\Quadrant.cs(153):public static Quadrant CommonHalfPlane(Quadrant quad1, Quadrant quad2)
Geometries\Quadrant.cs(178):public bool IsInHalfPlane(Quadrant halfPlane)
Geometries\Triangle.cs(56):public static bool IsAcute(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(71):public static bool IsCCW(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(84):public static bool Intersects(Coordinate a, Coordinate b, Coordinate c, Coordinate p)
Geometries\Triangle.cs(100):public static HCoordinate PerpendicularBisector(Coordinate a, Coordinate b)
Geometries\Triangle.cs(131):public static Coordinate Circumcentre(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(168):public static Coordinate CircumcentreDD(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(215):public static Coordinate InCentre(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(240):public static Coordinate Centroid(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(254):public static double Length(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(265):public static double LongestSideLength(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(285):public static Coordinate AngleBisector(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(311):public static double Area(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(342):public static double SignedArea(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(362):public static double Area3D(Coordinate a, Coordinate b, Coordinate c)
Geometries\Triangle.cs(409):public static double InterpolateZ(Coordinate p, Coordinate v0, Coordinate v1, Coordinate v2)
Geometries\Triangle.cs(451):public Coordinate InCentre()
Geometries\Triangle.cs(465):public bool IsAcute()
Geometries\Triangle.cs(474):public bool IsCCW()
Geometries\Triangle.cs(493):public Coordinate Circumcentre()
Geometries\Triangle.cs(507):public Coordinate Centroid()
Geometries\Triangle.cs(516):public double Length()
Geometries\Triangle.cs(524):public double LongestSideLength()
Geometries\Triangle.cs(535):public double Area()
Geometries\Triangle.cs(551):public double SignedArea()
Geometries\Triangle.cs(561):public double Area3D()
Geometries\Triangle.cs(577):public double InterpolateZ(Coordinate p)
Geometries\Utilities\AffineTransformation.cs(82):public static AffineTransformation ReflectionInstance(double x0, double y0, double x1, double y1)
Geometries\Utilities\AffineTransformation.cs(96):public static AffineTransformation ReflectionInstance(double x, double y)
Geometries\Utilities\AffineTransformation.cs(114):public static AffineTransformation RotationInstance(double theta)
Geometries\Utilities\AffineTransformation.cs(131):public static AffineTransformation RotationInstance(double sinTheta, double cosTheta)
Geometries\Utilities\AffineTransformation.cs(150):public static AffineTransformation RotationInstance(double theta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(169):public static AffineTransformation RotationInstance(double sinTheta, double cosTheta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(182):public static AffineTransformation ScaleInstance(double xScale, double yScale)
Geometries\Utilities\AffineTransformation.cs(197):public static AffineTransformation ScaleInstance(double xScale, double yScale, double x, double y)
Geometries\Utilities\AffineTransformation.cs(212):public static AffineTransformation ShearInstance(double xShear, double yShear)
Geometries\Utilities\AffineTransformation.cs(225):public static AffineTransformation TranslationInstance(double x, double y)
Geometries\Utilities\AffineTransformation.cs(329):public AffineTransformation SetToIdentity()
Geometries\Utilities\AffineTransformation.cs(346):public AffineTransformation SetTransformation(double m00,
Geometries\Utilities\AffineTransformation.cs(367):public AffineTransformation SetTransformation(AffineTransformation trans)
Geometries\Utilities\AffineTransformation.cs(456):public AffineTransformation GetInverse()
Geometries\Utilities\AffineTransformation.cs(480):public AffineTransformation SetToReflectionBasic(double x0, double y0, double x1, double y1)
Geometries\Utilities\AffineTransformation.cs(506):public AffineTransformation SetToReflection(double x0, double y0, double x1, double y1)
Geometries\Utilities\AffineTransformation.cs(548):public AffineTransformation SetToReflection(double x, double y)
Geometries\Utilities\AffineTransformation.cs(599):public AffineTransformation SetToRotation(double theta)
Geometries\Utilities\AffineTransformation.cs(621):public AffineTransformation SetToRotation(double sinTheta, double cosTheta)
Geometries\Utilities\AffineTransformation.cs(648):public AffineTransformation SetToRotation(double theta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(673):public AffineTransformation SetToRotation(double sinTheta, double cosTheta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(695):public AffineTransformation SetToScale(double xScale, double yScale)
Geometries\Utilities\AffineTransformation.cs(721):public AffineTransformation SetToShear(double xShear, double yShear)
Geometries\Utilities\AffineTransformation.cs(743):public AffineTransformation SetToTranslation(double dx, double dy)
Geometries\Utilities\AffineTransformation.cs(760):public AffineTransformation Reflect(double x0, double y0, double x1, double y1)
Geometries\Utilities\AffineTransformation.cs(774):public AffineTransformation Reflect(double x, double y)
Geometries\Utilities\AffineTransformation.cs(791):public AffineTransformation Rotate(double theta)
Geometries\Utilities\AffineTransformation.cs(806):public AffineTransformation Rotate(double sinTheta, double cosTheta)
Geometries\Utilities\AffineTransformation.cs(825):public AffineTransformation Rotate(double theta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(842):public AffineTransformation Rotate(double sinTheta, double cosTheta, double x, double y)
Geometries\Utilities\AffineTransformation.cs(856):public AffineTransformation Scale(double xScale, double yScale)
Geometries\Utilities\AffineTransformation.cs(870):public AffineTransformation Shear(double xShear, double yShear)
Geometries\Utilities\AffineTransformation.cs(884):public AffineTransformation Translate(double x, double y)
Geometries\Utilities\AffineTransformation.cs(905):public AffineTransformation Compose(AffineTransformation trans)
Geometries\Utilities\AffineTransformation.cs(937):public AffineTransformation ComposeBefore(AffineTransformation trans)
Geometries\Utilities\AffineTransformation.cs(963):public Coordinate Transform(Coordinate src, Coordinate dest)
Geometries\Utilities\AffineTransformation.cs(977):public Geometry Transform(Geometry g)
Geometries\Utilities\AffineTransformation.cs(990):public void Transform(CoordinateSequence seq, int i)
Geometries\Utilities\AffineTransformation.cs(1003):public void Filter(CoordinateSequence seq, int i)
Geometries\Utilities\AffineTransformation.cs(1064):public bool Equals(AffineTransformation trans)
Geometries\Utilities\AffineTransformation.cs(1096):public object Clone()
Geometries\Utilities\AffineTransformationBuilder.cs(78):public AffineTransformation GetTransformation()
Geometries\Utilities\AffineTransformationFactory.cs(25):public static AffineTransformation CreateFromControlVectors(Coordinate src0,
Geometries\Utilities\AffineTransformationFactory.cs(48):public static AffineTransformation CreateFromControlVectors(Coordinate src0,
Geometries\Utilities\AffineTransformationFactory.cs(80):public static AffineTransformation CreateFromControlVectors(Coordinate src0,
Geometries\Utilities\AffineTransformationFactory.cs(96):public static AffineTransformation CreateFromControlVectors(Coordinate[] src,
Geometries\Utilities\AffineTransformationFactory.cs(131):public static AffineTransformation CreateFromBaseLines(
Geometries\Utilities\ComponentGeometryExtractor.cs(22):public static List<Coordinate> GetCoordinates(Geometry geom)
Geometries\Utilities\ComponentGeometryExtractor.cs(39):public void Filter(Geometry geom)
Geometries\Utilities\EnvelopeCombiner.cs(25):public static Envelope Combine(params Geometry[] geoms) => new EnvelopeCombiner(geoms).Combine();
Geometries\Utilities\EnvelopeCombiner.cs(40):public static Envelope Combine(IEnumerable<Geometry> geoms) => new EnvelopeCombiner(geoms).Combine();
Geometries\Utilities\EnvelopeCombiner.cs(89):public Envelope Combine()
Geometries\Utilities\GeometryCollectionMapper.cs(20):public static GeometryCollection Map(GeometryCollection gc, Func<Geometry, Geometry> op)
Geometries\Utilities\GeometryCollectionMapper.cs(42):public GeometryCollection Map(GeometryCollection gc)
Geometries\Utilities\GeometryCombiner.cs(21):public static Geometry Combine(IEnumerable<Geometry> geoms)
Geometries\Utilities\GeometryCombiner.cs(33):public static Geometry Combine(Geometry g0, Geometry g1)
Geometries\Utilities\GeometryCombiner.cs(46):public static Geometry Combine(Geometry g0, Geometry g1, Geometry g2)
Geometries\Utilities\GeometryCombiner.cs(99):public static GeometryFactory ExtractFactory(IEnumerable<Geometry> geoms)
Geometries\Utilities\GeometryCombiner.cs(114):public Geometry Combine()
Geometries\Utilities\GeometryEditor.cs(107):public Geometry Edit(Geometry geometry, IGeometryEditorOperation operation)
Geometries\Utilities\GeometryEditor.cs(221):public Geometry Edit(Geometry geometry, GeometryFactory factory)
Geometries\Utilities\GeometryEditor.cs(239):public Geometry Edit(Geometry geometry, GeometryFactory factory)
Geometries\Utilities\GeometryEditor.cs(283):public Geometry Edit(Geometry geometry, GeometryFactory factory)
Geometries\Utilities\GeometryExtracter.cs(18):public static IList<Geometry> Extract<T>(Geometry geom, IList<Geometry> list) where T : Geometry
Geometries\Utilities\GeometryExtracter.cs(36):public static IList<Geometry> Extract<T>(Geometry geom) where T : Geometry
Geometries\Utilities\GeometryExtracter.cs(46):public static IList<Geometry> Extract(Geometry geom, string geometryType)
Geometries\Utilities\GeometryExtracter.cs(58):public static IList<Geometry> Extract(Geometry geom, string geometryType, IList<Geometry> list)
Geometries\Utilities\GeometryExtracter.cs(109):public void Filter(Geometry geom)
Geometries\Utilities\GeometryExtracter.cs(137):public void Filter(Geometry geom)
Geometries\Utilities\GeometryFixer.cs(55):public static Geometry Fix(Geometry geom)
Geometries\Utilities\GeometryFixer.cs(69):public static Geometry Fix(Geometry geom, bool isKeepMulti)
Geometries\Utilities\GeometryFixer.cs(110):public Geometry GetResult()
Geometries\Utilities\GeometryMapper.cs(26):public static Geometry Map(Geometry geom, Func<Geometry, Geometry> op)
Geometries\Utilities\GeometryMapper.cs(49):public static Geometry Map(Geometry geom, IMapOp op)
Geometries\Utilities\GeometryMapper.cs(61):public static ReadOnlyCollection<Geometry> Map(IEnumerable<Geometry> geoms, IMapOp op)
Geometries\Utilities\GeometryMapper.cs(86):public static Geometry FlatMap(Geometry geom, Dimension emptyDim, IMapOp op)
Geometries\Utilities\GeometryMapper.cs(170):public Geometry Map(Geometry geom) => _mapOp(geom);
Geometries\Utilities\GeometryTransformer.cs(95):public Geometry Transform(Geometry inputGeom)
Geometries\Utilities\LinearComponentExtracter.cs(20):public static TCollection GetLines<TCollection>(IEnumerable<Geometry> geoms, TCollection lines)
Geometries\Utilities\LinearComponentExtracter.cs(38):public static TCollection GetLines<TCollection>(IEnumerable<Geometry> geoms, TCollection lines, bool forceToLineString)
Geometries\Utilities\LinearComponentExtracter.cs(55):public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines)
Geometries\Utilities\LinearComponentExtracter.cs(77):public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines, bool forceToLineString)
Geometries\Utilities\LinearComponentExtracter.cs(92):public static ReadOnlyCollection<Geometry> GetLines(Geometry geom)
Geometries\Utilities\LinearComponentExtracter.cs(108):public static ReadOnlyCollection<Geometry> GetLines(Geometry geom, bool forceToLineString)
Geometries\Utilities\LinearComponentExtracter.cs(121):public static Geometry GetGeometry(Geometry geom)
Geometries\Utilities\LinearComponentExtracter.cs(134):public static Geometry GetGeometry(Geometry geom, bool forceToLineString)
Geometries\Utilities\LinearComponentExtracter.cs(168):public void Filter(Geometry geom)
Geometries\Utilities\LineStringExtracter.cs(19):public static TCollection GetLines<TCollection>(Geometry geom, TCollection lines)
Geometries\Utilities\LineStringExtracter.cs(40):public static ReadOnlyCollection<Geometry> GetLines(Geometry geom)
Geometries\Utilities\LineStringExtracter.cs(52):public static Geometry GetGeometry(Geometry geom)
Geometries\Utilities\LineStringExtracter.cs(68):public void Filter(Geometry geom)
Geometries\Utilities\Matrix.cs(44):public static double[] Solve(double[][] a, double[] b)
Geometries\Utilities\PointExtracter.cs(18):public static TCollection GetPoints<TCollection>(Geometry geom, TCollection list)
Geometries\Utilities\PointExtracter.cs(38):public static ReadOnlyCollection<Geometry> GetPoints(Geometry geom)
Geometries\Utilities\PointExtracter.cs(59):public void Filter(Geometry geom)
Geometries\Utilities\PolygonExtracter.cs(17):public static IList<Geometry> GetPolygons(Geometry geom, IList<Geometry> list)
Geometries\Utilities\PolygonExtracter.cs(36):public static IList<Geometry> GetPolygons(Geometry geom)
Geometries\Utilities\PolygonExtracter.cs(56):public void Filter(Geometry geom)
Geometries\Utilities\ShortCircuitedGeometryVisitor.cs(15):public void ApplyTo(Geometry geom)
Geometries\Utilities\SineStarFactory.cs(24):public static Geometry Create(Coordinate origin, double size, int nPts, int nArms, double armLengthRatio)
Geometries\Utilities\SineStarFactory.cs(72):public Geometry CreateSineStar()
Index\ArrayListVisitor.cs(23):public void VisitItem(T item)
Index\Bintree\Bintree.cs(37):public static Interval EnsureExtent(Interval itemInterval, double minExtent)
Index\Bintree\Bintree.cs(120):public void Insert(Interval itemInterval, T item)
Index\Bintree\Bintree.cs(133):public bool Remove(Interval itemInterval, T item)
Index\Bintree\Bintree.cs(143):public IEnumerator<T> GetEnumerator()
Index\Bintree\Bintree.cs(155):public IList<T> Query(double x)
Index\Bintree\Bintree.cs(168):public IList<T> Query(Interval interval)
Index\Bintree\Bintree.cs(186):public void Query(Interval interval, ICollection<T> foundItems)
Index\Bintree\Interval.cs(76):public void Init(double min, double max)
Index\Bintree\Interval.cs(92):public void ExpandToInclude(Interval interval)
Index\Bintree\Interval.cs(105):public bool Overlaps(Interval interval)
Index\Bintree\Interval.cs(116):public bool Overlaps(double min, double max)
Index\Bintree\Interval.cs(129):public bool Contains(Interval interval)
Index\Bintree\Interval.cs(141):public bool Contains(double min, double max)
Index\Bintree\Interval.cs(151):public bool Contains(double p)
Index\Bintree\Key.cs(19):public static int ComputeLevel(Interval interval)
Index\Bintree\Key.cs(62):public void ComputeKey(Interval itemInterval)
Index\Bintree\Node.cs(17):public static Node<T> CreateNode(Interval itemInterval)
Index\Bintree\Node.cs(31):public static Node<T> CreateExpanded(Node<T> node, Interval addInterval)
Index\Bintree\NodeBase.cs(18):public static int GetSubnodeIndex(Interval interval, double centre)
Index\Bintree\NodeBase.cs(95):public void AddAllItemsFromOverlapping(Interval interval, ICollection<T> resultItems)
Index\Bintree\NodeBase.cs(119):public bool Remove(Interval itemInterval, T item)
Index\Bintree\Root.cs(27):public void Insert(Interval itemInterval, T item)
Index\Chain\MonotoneChain.cs(127):public Envelope GetEnvelope(double expansionDistance)
Index\Chain\MonotoneChain.cs(161):public void GetLineSegment(int index, ref LineSegment ls)
Index\Chain\MonotoneChain.cs(198):public void Select(Envelope searchEnv, MonotoneChainSelectAction mcs)
Index\Chain\MonotoneChain.cs(251):public void ComputeOverlaps(MonotoneChain mc, MonotoneChainOverlapAction mco)
Index\Chain\MonotoneChain.cs(264):public void ComputeOverlaps(MonotoneChain mc, double overlapTolerance, MonotoneChainOverlapAction mco)
Index\Chain\MonotoneChainBuilder.cs(21):public static int[] ToIntArray(IList<int> list)
Index\Chain\MonotoneChainBuilder.cs(35):public static ReadOnlyCollection<MonotoneChain> GetChains(Coordinate[] pts)
Index\Chain\MonotoneChainBuilder.cs(47):public static ReadOnlyCollection<MonotoneChain> GetChains(Coordinate[] pts, object context)
Index\Chain\MonotoneChainBuilder.cs(69):public static int[] GetChainStartIndices(Coordinate[] pts)
Index\HPRtree\HilbertEncoder.cs(29):public int Encode(Envelope env)
Index\HPRtree\HPRtree.cs(88):public void Insert(Envelope itemEnv, T item)
Index\HPRtree\HPRtree.cs(100):public IList<T> Query(Envelope searchEnv)
Index\HPRtree\HPRtree.cs(113):public void Query(Envelope searchEnv, IItemVisitor<T> visitor)
Index\HPRtree\HPRtree.cs(222):public bool Remove(Envelope itemEnv, T item)
Index\HPRtree\HPRtree.cs(231):public void Build()
Index\HPRtree\HPRtree.cs(386):public Envelope[] GetBounds()
Index\HPRtree\HPRtree.cs(417):public int Compare(Item<T> item1, Item<T> item2)
Index\IntervalRTree\IntervalRTreeNode.cs(44):public int Compare(IntervalRTreeNode<T> n1, IntervalRTreeNode<T> n2)
Index\IntervalRTree\SortedPackedIntervalRTree.cs(48):public void Insert(double min, double max, T item)
Index\IntervalRTree\SortedPackedIntervalRTree.cs(135):public void Query(double min, double max, IItemVisitor<T> visitor)
Index\KdTree\KdNode.cs(68):public double SplitValue(bool isSplitOnX)
Index\KdTree\KdTree.cs(49):public static Coordinate[] ToCoordinates(IEnumerable<KdNode<T>> kdnodes)
Index\KdTree\KdTree.cs(64):public static Coordinate[] ToCoordinates(IEnumerable<KdNode<T>> kdnodes, bool includeRepeated)
Index\KdTree\KdTree.cs(126):public KdNode<T> Insert(Coordinate p)
Index\KdTree\KdTree.cs(141):public KdNode<T> Insert(Coordinate p, T data)
Index\KdTree\KdTree.cs(204):public KdNode<T> InsertExact(Coordinate p, T data)
Index\KdTree\KdTree.cs(266):public void Query(Envelope queryEnv, IKdNodeVisitor<T> visitor)
Index\KdTree\KdTree.cs(347):public IList<KdNode<T>> Query(Envelope queryEnv)
Index\KdTree\KdTree.cs(359):public void Query(Envelope queryEnv, IList<KdNode<T>> result)
Index\KdTree\KdTree.cs(369):public KdNode<T> Query(Coordinate queryPt)
Index\KdTree\KdTree.cs(444):public void Visit(KdNode<T> node)
Index\KdTree\KdTree.cs(466):public Envelope QueryEnvelope()
Index\KdTree\KdTree.cs(473):public void Visit(KdNode<T> node)
Index\KdTree\KdTreeExtensions.cs(16):public static KdNode<T> NearestNeighbor<T>(this KdTree<T> self, Coordinate coord) where T : class
Index\Quadtree\DoubleBits.cs(28):public static double PowerOf2(int exp)
Index\Quadtree\DoubleBits.cs(42):public static int GetExponent(double d)
Index\Quadtree\DoubleBits.cs(53):public static double TruncateToPowerOfTwo(double d)
Index\Quadtree\DoubleBits.cs(65):public static string ToBinaryString(double d)
Index\Quadtree\DoubleBits.cs(77):public static double MaximumCommonMantissa(double d1, double d2)
Index\Quadtree\DoubleBits.cs(133):public void ZeroLowerBits(int nBits)
Index\Quadtree\DoubleBits.cs(145):public int GetBit(int i)
Index\Quadtree\DoubleBits.cs(159):public int NumCommonMantissaBits(DoubleBits db)
Index\Quadtree\IntervalSize.cs(35):public static bool IsZeroWidth(double min, double max)
Index\Quadtree\Key.cs(18):public static int ComputeQuadLevel(Envelope env)
Index\Quadtree\Key.cs(68):public void ComputeKey(Envelope itemEnv)
Index\Quadtree\Node.cs(20):public static Node<T> CreateNode(Envelope env)
Index\Quadtree\Node.cs(33):public static Node<T> CreateExpanded(Node<T> node, Envelope addEnv)
Index\Quadtree\Node.cs(86):public Node<T> GetNode(Envelope searchEnv)
Index\Quadtree\Node.cs(105):public NodeBase<T> Find(Envelope searchEnv)
Index\Quadtree\Node.cs(124):public void InsertNode(Node<T> node)
Index\Quadtree\NodeBase.cs(22):public static int GetSubnodeIndex(Envelope env, double centreX, double centreY)
Index\Quadtree\NodeBase.cs(88):public void Add(T item)
Index\Quadtree\NodeBase.cs(99):public bool Remove(Envelope itemEnv, T item)
Index\Quadtree\NodeBase.cs(182):public IList<T> AddAllItems(ref IList<T> resultItems)
Index\Quadtree\NodeBase.cs(207):public void AddAllItemsFromOverlapping(Envelope searchEnv, ref IList<T> resultItems)
Index\Quadtree\NodeBase.cs(226):public void Visit(Envelope searchEnv, IItemVisitor<T> visitor)
Index\Quadtree\NodeBase.cs(252):public IEnumerable<T> Query(Envelope searchEnv, Func<T, bool> predicate)
Index\Quadtree\NodeBase.cs(381):public void Add(T item)
Index\Quadtree\NodeBase.cs(387):public void Clear()
Index\Quadtree\NodeBase.cs(393):public bool Contains(T item)
Index\Quadtree\NodeBase.cs(399):public void CopyTo(T[] array, int arrayIndex)
Index\Quadtree\NodeBase.cs(405):public IEnumerator<T> GetEnumerator()
Index\Quadtree\NodeBase.cs(410):public int IndexOf(T item)
Index\Quadtree\NodeBase.cs(416):public void Insert(int index, T item)
Index\Quadtree\NodeBase.cs(422):public bool Remove(T item)
Index\Quadtree\NodeBase.cs(428):public void RemoveAt(int index)
Index\Quadtree\NodeBase.cs(468):public void Dispose()
Index\Quadtree\NodeBase.cs(473):public bool MoveNext()
Index\Quadtree\NodeBase.cs(479):public void Reset()
Index\Quadtree\Quadtree.cs(42):public static Envelope EnsureExtent(Envelope itemEnv, double minExtent)
Index\Quadtree\Quadtree.cs(135):public void Insert(Envelope itemEnv, T item)
Index\Quadtree\Quadtree.cs(148):public bool Remove(Envelope itemEnv, T item)
Index\Quadtree\Quadtree.cs(168):public IList<T> Query(Envelope searchEnv)
Index\Quadtree\Quadtree.cs(193):public void Query(Envelope searchEnv, IItemVisitor<T> visitor)
Index\Quadtree\Quadtree.cs(205):public IList<T> QueryAll()
Index\Quadtree\Quadtree.cs(253):public void VisitItem(T item)
Index\Quadtree\Root.cs(26):public void Insert(Envelope itemEnv, T item)
Index\Strtree\AbstractNode.cs(96):public void AddChildBoundable(IBoundable<T, TItem> childBoundable)
Index\Strtree\AbstractSTRtree.cs(101):public void Build()
Index\Strtree\AbstractSTRtree.cs(350):public IList ItemsTree()
Index\Strtree\BoundablePair.cs(57):public double MaximumDistance()
Index\Strtree\BoundablePair.cs(97):public int CompareTo(BoundablePair<TItem> o)
Index\Strtree\BoundablePair.cs(109):public static bool IsComposite(IBoundable<Envelope, TItem> item)
Index\Strtree\BoundablePair.cs(137):public void ExpandToQueue(PriorityQueue<BoundablePair<TItem>> priQ, double minDistance)
Index\Strtree\BoundablePairDistanceComparer.cs(42):public int Compare(BoundablePair<TItem> p1, BoundablePair<TItem> p2)
Index\Strtree\EnvelopeDistance.cs(22):public static double MaximumDistance(Envelope env1, Envelope env2)
Index\Strtree\EnvelopeDistance.cs(52):public static double MinMaxDistance(Envelope a, Envelope b)
Index\Strtree\GeometryItemDistance.cs(27):public double Distance(IBoundable<Envelope, Geometry> item1, IBoundable<Envelope, Geometry> item2)
Index\Strtree\Interval.cs(43):public void ExpandToInclude(Interval other)
Index\Strtree\Interval.cs(54):public Interval ExpandedBy(Interval other)
Index\Strtree\Interval.cs(66):public bool Intersects(Interval other)
Index\Strtree\SIRtree.cs(18):public int Compare(IBoundable<Interval, TItem> o1, IBoundable<Interval, TItem> o2)
Index\Strtree\SIRtree.cs(33):public bool Intersects(Interval aBounds, Interval bBounds)
Index\Strtree\SIRtree.cs(98):public void Insert(double x1, double x2, TItem item)
Index\Strtree\SIRtree.cs(108):public IList<TItem> Query(double x)
Index\Strtree\SIRtree.cs(118):public IList<TItem> Query(double x1, double x2)
Index\Strtree\STRtree.cs(80):public bool Intersects(Envelope aBounds, Envelope bBounds)
Index\Strtree\STRtree.cs(325):public TItem[] NearestNeighbour(IItemDistance<Envelope, TItem> itemDist)
Index\Strtree\STRtree.cs(349):public TItem NearestNeighbour(Envelope env, TItem item, IItemDistance<Envelope, TItem> itemDist)
Index\Strtree\STRtree.cs(369):public TItem[] NearestNeighbour(STRtree<TItem> tree, IItemDistance<Envelope, TItem> itemDist)
Index\Strtree\STRtree.cs(444):public bool IsWithinDistance(STRtree<TItem> tree, IItemDistance<Envelope, TItem> itemDist, double maxDistance)
Index\Strtree\STRtree.cs(548):public TItem[] NearestNeighbour(Envelope env, TItem item, IItemDistance<Envelope, TItem> itemDist, int k)
Index\Sweepline\SweepLineEvent.cs(80):public int CompareTo(object o)
Index\Sweepline\SweepLineIndex.cs(27):public void Add(SweepLineInterval sweepInt)
Index\Sweepline\SweepLineIndex.cs(57):public void ComputeOverlaps(ISweepLineOverlapAction action)
Index\VertexSequencePackedRtree.cs(50):public Envelope[] GetBounds()
Index\VertexSequencePackedRtree.cs(159):public int[] Query(Envelope queryEnv)
Index\VertexSequencePackedRtree.cs(229):public void RemoveAt(int index)
IO\GML2\GMLReader.cs(43):public Geometry Read(XmlDocument document)
IO\GML2\GMLReader.cs(53):public Geometry Read(XDocument document)
IO\GML2\GMLReader.cs(59):public Geometry Read(string xmlText)
IO\GML2\GMLReader.cs(64):public Geometry Read(StringReader stringReader)
IO\GML2\GMLReader.cs(69):public Geometry Read(XmlReader reader)
IO\GML2\GMLWriter.cs(63):public XmlReader Write(Geometry geometry)
IO\GML2\GMLWriter.cs(81):public void Write(Geometry geometry, Stream stream)
IO\GML2\GMLWriter.cs(172):public void Write(Geometry geometry, XmlWriter writer)
IO\KML\KMLReader.cs(79):public Geometry Read(string kmlGeometrystring)
IO\KML\KMLReader.cs(94):public Geometry Read(TextReader kmlStreamReader)
IO\KML\KMLWriter.cs(51):public static string WriteGeometry(Geometry geometry, double z)
IO\KML\KMLWriter.cs(78):public static string WriteGeometry(Geometry geometry, double z, int precision,
IO\KML\KMLWriter.cs(189):public string Write(Geometry geom)
IO\KML\KMLWriter.cs(201):public void Write(Geometry geom, TextWriter writer)
IO\KML\KMLWriter.cs(212):public void Write(Geometry geom, StringBuilder sb)
IO\OrdinateFormat.cs(59):public static OrdinateFormat Create(int maximumFractionDigits)
IO\OrdinateFormat.cs(104):public string Format(double ord)
IO\WKBHexFileReader.cs(56):public ReadOnlyCollection<Geometry> Read(string file)
IO\WKBHexFileReader.cs(78):public ReadOnlyCollection<Geometry> Read(Stream stream)
IO\WKBReader.cs(40):public static byte[] HexToBytes(string hex)
IO\WKBReader.cs(128):public Geometry Read(byte[] data)
IO\WKBWriter.cs(50):public static string ToHex(byte[] bytes)
IO\WKTFileReader.cs(101):public IList<Geometry> Read()
IO\WKTReader.cs(198):public Geometry Read(string wellKnownText)
IO\WKTReader.cs(216):public Geometry Read(Stream stream)
IO\WKTReader.cs(233):public Geometry Read(TextReader reader)
IO\WKTWriter.cs(29):public static string ToPoint(Coordinate p0)
IO\WKTWriter.cs(41):public static string ToLineString(CoordinateSequence seq)
IO\WKTWriter.cs(68):public static string ToLineString(Coordinate[] coord)
IO\WKTWriter.cs(96):public static string ToLineString(Coordinate p0, Coordinate p1)
IO\WKTWriter.cs(175):public void Filter(CoordinateSequence seq)
IO\WKTWriter.cs(343):public static WKTWriter ForMicrosoftSqlServer() => new WKTWriter(4, true);
IO\WKTWriter.cs(374):public void Write(Geometry geometry, Stream stream)
LinearReferencing\ExtractLineByLocation.cs(22):public static Geometry Extract(Geometry line, LinearLocation start, LinearLocation end)
LinearReferencing\ExtractLineByLocation.cs(47):public Geometry Extract(LinearLocation start, LinearLocation end)
LinearReferencing\LengthIndexedLine.cs(41):public Coordinate ExtractPoint(double index)
LinearReferencing\LengthIndexedLine.cs(59):public Coordinate ExtractPoint(double index, double offsetDistance)
LinearReferencing\LengthIndexedLine.cs(75):public Geometry ExtractLine(double startIndex, double endIndex)
LinearReferencing\LengthIndexedLine.cs(117):public double IndexOf(Coordinate pt)
LinearReferencing\LengthIndexedLine.cs(141):public double IndexOfAfter(Coordinate pt, double minIndex)
LinearReferencing\LengthIndexedLine.cs(154):public double[] IndicesOf(Geometry subLine)
LinearReferencing\LengthIndexedLine.cs(172):public double Project(Coordinate pt)
LinearReferencing\LengthIndexedLine.cs(192):public bool IsValidIndex(double index)
LinearReferencing\LengthIndexedLine.cs(202):public double ClampIndex(double index)
LinearReferencing\LengthIndexOfPoint.cs(11):public static double IndexOf(Geometry linearGeom, Coordinate inputPt)
LinearReferencing\LengthIndexOfPoint.cs(17):public static double IndexOfAfter(Geometry linearGeom, Coordinate inputPt, double minIndex)
LinearReferencing\LengthIndexOfPoint.cs(39):public double IndexOf(Coordinate inputPt)
LinearReferencing\LengthIndexOfPoint.cs(57):public double IndexOfAfter(Coordinate inputPt, double minIndex)
LinearReferencing\LengthLocationMap.cs(24):public static LinearLocation GetLocation(Geometry linearGeom, double length)
LinearReferencing\LengthLocationMap.cs(39):public static LinearLocation GetLocation(Geometry linearGeom, double length, bool resolveLower)
LinearReferencing\LengthLocationMap.cs(52):public static double GetLength(Geometry linearGeom, LinearLocation loc)
LinearReferencing\LengthLocationMap.cs(77):public LinearLocation GetLocation(double length)
LinearReferencing\LengthLocationMap.cs(92):public LinearLocation GetLocation(double length, bool resolveLower)
LinearReferencing\LengthLocationMap.cs(186):public double GetLength(LinearLocation loc)
LinearReferencing\LinearGeometryBuilder.cs(44):public void Add(Coordinate pt)
LinearReferencing\LinearGeometryBuilder.cs(54):public void Add(Coordinate pt, bool allowRepeatedPoints)
LinearReferencing\LinearGeometryBuilder.cs(70):public void EndLine()
LinearReferencing\LinearGeometryBuilder.cs(121):public Geometry GetGeometry()
LinearReferencing\LinearIterator.cs(20):public static int SegmentEndVertexIndex(LinearLocation loc)
LinearReferencing\LinearIterator.cs(104):public bool HasNext()
LinearReferencing\LinearIterator.cs(117):public void Next()
LinearReferencing\LinearIterator.cs(210)://public bool MoveNext()
LinearReferencing\LinearIterator.cs(247)://public void Reset()
LinearReferencing\LinearIterator.cs(265)://public void Dispose()
LinearReferencing\LinearIterator.cs(297)://public IEnumerator<LinearElement> GetEnumerator()
LinearReferencing\LinearLocation.cs(20):public static LinearLocation GetEndLocation(Geometry linear)
LinearReferencing\LinearLocation.cs(51):public static Coordinate PointAlongSegmentByFraction(Coordinate p0, Coordinate p1, double fraction)
LinearReferencing\LinearLocation.cs(157):public void Clamp(Geometry linear)
LinearReferencing\LinearLocation.cs(180):public void SnapToVertex(Geometry linearGeom, double minDistance)
LinearReferencing\LinearLocation.cs(201):public double GetSegmentLength(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(220):public void SetToEnd(Geometry linear)
LinearReferencing\LinearLocation.cs(256):public Coordinate GetCoordinate(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(271):public LineSegment GetSegment(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(291):public bool IsValid(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(320):public int CompareTo(object obj)
LinearReferencing\LinearLocation.cs(338):public int CompareTo(LinearLocation other)
LinearReferencing\LinearLocation.cs(374):public int CompareLocationValues(int componentIndex1, int segmentIndex1, double segmentFraction1)
LinearReferencing\LinearLocation.cs(409):public static int CompareLocationValues(
LinearReferencing\LinearLocation.cs(437):public bool IsOnSameSegment(LinearLocation loc)
LinearReferencing\LinearLocation.cs(458):public bool IsEndpoint(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(477):public LinearLocation ToLowest(Geometry linearGeom)
LinearReferencing\LinearLocation.cs(488):public LinearLocation Copy()
LinearReferencing\LocationIndexedLine.cs(42):public Coordinate ExtractPoint(LinearLocation index)
LinearReferencing\LocationIndexedLine.cs(61):public Coordinate ExtractPoint(LinearLocation index, double offsetDistance)
LinearReferencing\LocationIndexedLine.cs(79):public Coordinate ExtractPoint(double index, double offsetDistance)
LinearReferencing\LocationIndexedLine.cs(93):public Geometry ExtractLine(LinearLocation startIndex, LinearLocation endIndex)
LinearReferencing\LocationIndexedLine.cs(109):public LinearLocation IndexOf(Coordinate pt)
LinearReferencing\LocationIndexedLine.cs(122):public LinearLocation[] IndicesOf(Geometry subLine)
LinearReferencing\LocationIndexedLine.cs(151):public LinearLocation IndexOfAfter(Coordinate pt, LinearLocation minIndex)
LinearReferencing\LocationIndexedLine.cs(163):public LinearLocation Project(Coordinate pt)
LinearReferencing\LocationIndexedLine.cs(183):public bool IsValidIndex(LinearLocation index)
LinearReferencing\LocationIndexedLine.cs(194):public LinearLocation ClampIndex(LinearLocation index)
LinearReferencing\LocationIndexOfLine.cs(21):public static LinearLocation[] IndicesOf(Geometry linearGeom, Geometry subLine)
LinearReferencing\LocationIndexOfPoint.cs(21):public static LinearLocation IndexOf(Geometry linearGeom, Coordinate inputPt)
LinearReferencing\LocationIndexOfPoint.cs(27):public static LinearLocation IndexOfAfter(Geometry linearGeom, Coordinate inputPt, LinearLocation minIndex)
LinearReferencing\LocationIndexOfPoint.cs(49):public LinearLocation IndexOf(Coordinate inputPt)
LinearReferencing\LocationIndexOfPoint.cs(64):public LinearLocation IndexOfAfter(Coordinate inputPt, LinearLocation minIndex)
LinearReferencing\LocationIndexOfPoint.cs(138):public static double SegmentFraction(LineSegment seg, Coordinate inputPt)
Mathematics\DD.cs(115):public static DD ValueOf(string str)
Mathematics\DD.cs(134):public static DD ValueOf(double x)
Mathematics\DD.cs(208):public static DD Copy(DD dd)
Mathematics\DD.cs(217):public object Clone()
Mathematics\DD.cs(285):public static DD operator-(DD val)
Mathematics\DD.cs(373):public DD Reciprocal()
Mathematics\DD.cs(403):public static DD Determinant(double x1, double y1, double x2, double y2)
Mathematics\DD.cs(416):public static DD Determinant(DD x1, DD y1, DD x2, DD y2)
Mathematics\DD.cs(429):public DD Min(DD x)
Mathematics\DD.cs(439):public DD Max(DD x)
Mathematics\DD.cs(459):public DD Floor()
Mathematics\DD.cs(485):public DD Ceiling()
Mathematics\DD.cs(511):public int Signum()
Mathematics\DD.cs(529):public DD Rint()
Mathematics\DD.cs(549):public DD Truncate()
Mathematics\DD.cs(564):public DD Abs()
Mathematics\DD.cs(574):public DD Sqr()
Mathematics\DD.cs(583):public static DD Sqr(double x)
Mathematics\DD.cs(594):public DD Sqrt()
Mathematics\DD.cs(631):public static DD Sqrt(double x)
Mathematics\DD.cs(643):public DD Pow(int exp)
Mathematics\DD.cs(686):public double ToDoubleValue()
Mathematics\DD.cs(695):public int ToIntValue()
Mathematics\DD.cs(718):public bool IsPositive()
Mathematics\DD.cs(726):public static bool IsNaN(DD value)
Mathematics\DD.cs(736):public static bool IsInfinity(DD value)
Mathematics\DD.cs(746):public bool Equals(DD y)
Mathematics\DD.cs(778):public bool GreaterThan(DD y)
Mathematics\DD.cs(788):public bool GreaterOrEqualThan(DD y)
Mathematics\DD.cs(798):public bool LessThan(DD y)
Mathematics\DD.cs(808):public bool LessOrEqualThan(DD y)
Mathematics\DD.cs(820):public int CompareTo(DD other)
Mathematics\DD.cs(830):public int CompareTo(object o)
Mathematics\DD.cs(856):public string Dump()
Mathematics\DD.cs(879):public string ToStandardNotation()
Mathematics\DD.cs(917):public string ToSciNotation()
Mathematics\DD.cs(1103):public static DD Parse(string str)
Mathematics\MathUtil.cs(15):public static double Clamp(double x, double min, double max)
Mathematics\MathUtil.cs(29):public static int Clamp(int x, int min, int max)
Mathematics\MathUtil.cs(42):public static int ClampMax(int x, int max)
Mathematics\MathUtil.cs(54):public static int Ceiling(int num, int denom)
Mathematics\MathUtil.cs(75):public static double Log10(double x)
Mathematics\MathUtil.cs(91):public static int Wrap(int index, int max)
Mathematics\MathUtil.cs(106):public static double Average(double x1, double x2)
Mathematics\MathUtil.cs(118):public static double Max(double v1, double v2, double v3)
Mathematics\MathUtil.cs(134):public static double Max(double v1, double v2, double v3, double v4)
Mathematics\MathUtil.cs(150):public static double Min(double v1, double v2, double v3)
Mathematics\MathUtil.cs(166):public static double Min(double v1, double v2, double v3, double v4)
Mathematics\MathUtil.cs(191):public static double QuasiRandom(double curr)
Mathematics\MathUtil.cs(212):public static double QuasiRandom(double curr, double alpha)
Mathematics\Matrix.cs(41):public static double[] Solve(double[][] a, double[] b)
Mathematics\Plane3D.cs(45):public double OrientedDistance(Coordinate p)
Mathematics\Plane3D.cs(65):public Plane ClosestAxisPlane()
Mathematics\Vector2D.cs(25):public static Vector2D Create(double x, double y)
Mathematics\Vector2D.cs(35):public static Vector2D Create(Vector2D v)
Mathematics\Vector2D.cs(45):public static Vector2D Create(Coordinate coord)
Mathematics\Vector2D.cs(57):public static Vector2D Create(Coordinate from, Coordinate to)
Mathematics\Vector2D.cs(155):public Vector2D Add(Vector2D v)
Mathematics\Vector2D.cs(165):public Vector2D Subtract(Vector2D v)
Mathematics\Vector2D.cs(175):public Vector2D Multiply(double d)
Mathematics\Vector2D.cs(185):public Vector2D Divide(double d)
Mathematics\Vector2D.cs(194):public Vector2D Negate()
Mathematics\Vector2D.cs(203):public double Length()
Mathematics\Vector2D.cs(212):public double LengthSquared()
Mathematics\Vector2D.cs(221):public Vector2D Normalize()
Mathematics\Vector2D.cs(234):public Vector2D Average(Vector2D v)
Mathematics\Vector2D.cs(253):public Vector2D WeightedSum(Vector2D v, double frac)
Mathematics\Vector2D.cs(265):public double Distance(Vector2D v)
Mathematics\Vector2D.cs(277):public double Dot(Vector2D v)
Mathematics\Vector2D.cs(286):public double Angle()
Mathematics\Vector2D.cs(296):public double Angle(Vector2D v)
Mathematics\Vector2D.cs(306):public double AngleTo(Vector2D v)
Mathematics\Vector2D.cs(325):public Vector2D Rotate(double angle)
Mathematics\Vector2D.cs(344):public Vector2D RotateByQuarterCircle(int numQuarters)
Mathematics\Vector2D.cs(371):public bool IsParallel(Vector2D v)
Mathematics\Vector2D.cs(381):public Coordinate Translate(Coordinate coord)
Mathematics\Vector2D.cs(390):public Coordinate ToCoordinate()
Mathematics\Vector2D.cs(399):public object Clone()
Mathematics\Vector3D.cs(27):public static double Dot(Coordinate A, Coordinate B, Coordinate C, Coordinate D)
Mathematics\Vector3D.cs(44):public static Vector3D Cross(Vector3D left, Vector3D right)
Mathematics\Vector3D.cs(59):public static Vector3D Create(double x, double y, double z)
Mathematics\Vector3D.cs(72):public static Vector3D Create(Coordinate coord)
Mathematics\Vector3D.cs(84):public static double Dot(Coordinate v1, Coordinate v2)
Mathematics\Vector3D.cs(165):public Vector3D Add(Vector3D v)
Mathematics\Vector3D.cs(176):public Vector3D Subtract(Vector3D v)
Mathematics\Vector3D.cs(188):public Vector3D Divide(double d)
Mathematics\Vector3D.cs(198):public double Dot(Vector3D v)
Mathematics\Vector3D.cs(208):public Vector3D Cross(Vector3D v)
Mathematics\Vector3D.cs(218):public double Length()
Mathematics\Vector3D.cs(228):public static double Length(Coordinate v)
Mathematics\Vector3D.cs(238):public Vector3D Normalize()
Mathematics\Vector3D.cs(252):public static Coordinate Normalize(Coordinate v)
Mathematics\VectorMath.cs(20):public static Coordinate NormalToTriangle(Coordinate p0, Coordinate p1, Coordinate p2)
Mathematics\VectorMath.cs(33):public static void Normalize(Coordinate v)
Mathematics\VectorMath.cs(50):public static Coordinate CrossProduct(Coordinate v1, Coordinate v2)
Mathematics\VectorMath.cs(64):public static double DotProduct(Coordinate v1, Coordinate v2)
Mathematics\VectorMath.cs(77):public static double Det(double a1, double a2, double b1, double b2)
Noding\BasicSegmentString.cs(48):public Octants GetSegmentOctant(int index)
Noding\FastNodingValidator.cs(43):public static IList<Coordinate> ComputeIntersections(IEnumerable<ISegmentString> segStrings)
Noding\FastNodingValidator.cs(96):public string GetErrorMessage()
Noding\FastNodingValidator.cs(113):public void CheckValid()
Noding\FastSegmentSetIntersectionFinder.cs(40):public bool Intersects(IList<ISegmentString> segStrings)
Noding\FastSegmentSetIntersectionFinder.cs(53):public bool Intersects(IList<ISegmentString> segStrings, SegmentIntersectionDetector intDetector)
Noding\InteriorIntersectionFinderAdder.cs(48):public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1)
Noding\IntersectionAdder.cs(20):public static bool IsAdjacentSegments(int i1, int i2)
Noding\IntersectionAdder.cs(146):public void ProcessIntersections(ISegmentString e0, int segIndex0, ISegmentString e1, int segIndex1)
Noding\IteratedNoder.cs(56):public IList<ISegmentString> GetNodedSubstrings()
Noding\IteratedNoder.cs(68):public void ComputeNodes(IList<ISegmentString> segStrings)
Noding\MCIndexSegmentSetMutualIntersector.cs(65):public void Process(IEnumerable<ISegmentString> segStrings, ISegmentIntersector segInt)
Noding\NodedSegmentString.cs(31):public static ReadOnlyCollection<ISegmentString> GetNodedSubstrings(IEnumerable<ISegmentString> segStrings)
Noding\NodedSegmentString.cs(43):public static void GetNodedSubstrings(IEnumerable<ISegmentString> segStrings, ICollection<ISegmentString> resultEdgelist)
Noding\NodedSegmentString.cs(100):public Coordinate GetCoordinate(int i)
Noding\NodedSegmentString.cs(132):public Octants GetSegmentOctant(int index)
Noding\NodedSegmentString.cs(152):public void AddIntersections(LineIntersector li, int segmentIndex, int geomIndex)
Noding\NodedSegmentString.cs(168):public void AddIntersection(LineIntersector li, int segmentIndex, int geomIndex, int intIndex)
Noding\NodedSegmentString.cs(179):public void AddIntersection(Coordinate intPt, int segmentIndex)
Noding\NodingIntersectionFinder.cs(36):public static NodingIntersectionFinder CreateAnyIntersectionFinder(LineIntersector li)
Noding\NodingIntersectionFinder.cs(47):public static NodingIntersectionFinder CreateAllIntersectionsFinder(LineIntersector li)
Noding\NodingIntersectionFinder.cs(60):public static NodingIntersectionFinder CreateInteriorIntersectionsFinder(LineIntersector li)
Noding\NodingIntersectionFinder.cs(74):public static NodingIntersectionFinder CreateIntersectionCounter(LineIntersector li)
Noding\NodingIntersectionFinder.cs(88):public static NodingIntersectionFinder CreateInteriorIntersectionCounter(LineIntersector li)
Noding\NodingIntersectionFinder.cs(198):public void ProcessIntersections(
Noding\NodingValidator.cs(33):public void CheckValid()
Noding\Octant.cs(78):public static Octants GetOctant(double dx, double dy)
Noding\Octant.cs(128):public static Octants GetOctant(Coordinate p0, Coordinate p1)
Noding\OrientedCoordinateArray.cs(47):public int CompareTo(object o1)
Noding\ScaledNoder.cs(48):public IList<ISegmentString> GetNodedSubstrings()
Noding\ScaledNoder.cs(60):public void ComputeNodes(IList<ISegmentString> inputSegStrings)
Noding\SegmentExtractingNoder.cs(23):public void ComputeNodes(IList<ISegmentString> segStrings)
Noding\SegmentExtractingNoder.cs(52):public IList<ISegmentString> GetNodedSubstrings()
Noding\SegmentIntersectionDetector.cs(88):public void ProcessIntersections(
Noding\SegmentNode.cs(59):public bool IsEndPoint(int maxSegmentIndex)
Noding\SegmentNode.cs(74):public int CompareTo(object obj)
Noding\SegmentNode.cs(96):public void Write(StreamWriter outstream)
Noding\SegmentNodeList.cs(38):public SegmentNode Add(Coordinate intPt, int segmentIndex)
Noding\SegmentNodeList.cs(58):public IEnumerator<object> GetEnumerator()
Noding\SegmentNodeList.cs(172):public void AddSplitEdges(ICollection<ISegmentString> edgeList)
Noding\SegmentNodeList.cs(273):public Coordinate[] GetSplitCoordinates()
Noding\SegmentNodeList.cs(324):public void Write(StreamWriter outstream)
Noding\SegmentNodeList.cs(358):public void Dispose()
Noding\SegmentNodeList.cs(382):public bool MoveNext()
Noding\SegmentNodeList.cs(414):public void Reset()
Noding\SegmentPointComparator.cs(28):public static int Compare(Octants octant, Coordinate p0, Coordinate p1)
Noding\SegmentPointComparator.cs(67):public static int RelativeSign(double x0, double x1)
Noding\SegmentStringDissolver.cs(69):public void Dissolve(IEnumerable<ISegmentString> segStrings)
Noding\SegmentStringDissolver.cs(89):public void Dissolve(ISegmentString segString)
Noding\SegmentStringUtil.cs(23):public static IList<ISegmentString> ExtractSegmentStrings(Geometry geom)
Noding\SegmentStringUtil.cs(35):public static IList<ISegmentString> ExtractNodedSegmentStrings(Geometry geom)
Noding\SegmentStringUtil.cs(53):public static IList<ISegmentString> ExtractBasicSegmentStrings(Geometry geom)
Noding\SegmentStringUtil.cs(73):public static Geometry ToGeometry(IList<ISegmentString> segStrings, GeometryFactory geomFact)
Noding\SegmentStringUtil.cs(88):public static string ToString(IEnumerable<ISegmentString> segStrings)
Noding\SimpleSegmentSetMutualIntersector.cs(31):public void Process(IEnumerable<ISegmentString> segmentStrings, ISegmentIntersector segmentIntersector)
Noding\Snapround\GeometryNoder.cs(47):public ReadOnlyCollection<LineString> Node(IEnumerable<Geometry> geoms)
Noding\Snapround\HotPixel.cs(120):public Envelope GetSafeEnvelope()
Noding\Snapround\HotPixel.cs(133):public bool Intersects(Coordinate p)
Noding\Snapround\HotPixel.cs(153):public bool Intersects(Coordinate p0, Coordinate p1)
Noding\Snapround\HotPixel.cs(172):public bool IntersectsScaled(Coordinate p0, Coordinate p1)
Noding\Snapround\HotPixel.cs(351):public bool AddSnappedNode(INodableSegmentString segStr, int segIndex)
Noding\Snapround\HotPixelIndex.cs(79):public bool MoveNext()
Noding\Snapround\HotPixelIndex.cs(94):public void Reset()
Noding\Snapround\HotPixelIndex.cs(113):public void Dispose()
Noding\Snapround\HotPixelIndex.cs(120):public IEnumerator<Coordinate> GetEnumerator()
Noding\Snapround\HotPixelIndex.cs(136):public void Add(IEnumerable<Coordinate> pts)
Noding\Snapround\HotPixelIndex.cs(157):public void AddNodes(IEnumerable<Coordinate> pts)
Noding\Snapround\HotPixelIndex.cs(177):public HotPixel Add(Coordinate p)
Noding\Snapround\HotPixelIndex.cs(227):public void Query(Coordinate p0, Coordinate p1, IKdNodeVisitor<HotPixel> visitor)
Noding\Snapround\MCIndexPointSnapper.cs(49):public void VisitItem(MonotoneChain item)
Noding\Snapround\MCIndexPointSnapper.cs(66):public bool Snap(HotPixel hotPixel, ISegmentString parentEdge, int hotPixelVertexIndex)
Noding\Snapround\MCIndexPointSnapper.cs(82):public bool Snap(HotPixel hotPixel)
Noding\Snapround\MCIndexSnapRounder.cs(51):public IList<ISegmentString> GetNodedSubstrings()
Noding\Snapround\MCIndexSnapRounder.cs(62):public void ComputeNodes(IList<ISegmentString> inputSegmentStrings)
Noding\Snapround\MCIndexSnapRounder.cs(116):public void ComputeVertexSnaps(IList<ISegmentString> edges)
Noding\Snapround\SimpleSnapRounder.cs(55):public IList<ISegmentString> GetNodedSubstrings()
Noding\Snapround\SimpleSnapRounder.cs(66):public void ComputeNodes(IList<ISegmentString> inputSegmentStrings)
Noding\Snapround\SimpleSnapRounder.cs(269):public void ComputeVertexSnaps(IList<ISegmentString> edges)
Noding\Snapround\SnapRoundingIntersectionAdder.cs(75):public void ProcessIntersections(
Noding\Snapround\SnapRoundingNoder.cs(61):public IList<ISegmentString> GetNodedSubstrings()
Noding\Snapround\SnapRoundingNoder.cs(71):public void ComputeNodes(IList<ISegmentString> inputSegmentStrings)
Noding\Snap\SnappingIntersectionAdder.cs(38):public void ProcessIntersections(
Noding\Snap\SnappingNoder.cs(48):public IList<ISegmentString> GetNodedSubstrings()
Noding\Snap\SnappingNoder.cs(55):public void ComputeNodes(IList<ISegmentString> inputSegmentStrings)
Noding\Snap\SnappingPointIndex.cs(35):public Coordinate Snap(Coordinate p)
Noding\ValidatingNoder.cs(37):public void ComputeNodes(IList<ISegmentString> segStrings)
Noding\ValidatingNoder.cs(51):public IList<ISegmentString> GetNodedSubstrings()
NtsGeometryServices.cs(166):public PrecisionModel CreatePrecisionModel(PrecisionModels modelType) => new PrecisionModel(modelType);
NtsGeometryServices.cs(173):public PrecisionModel CreatePrecisionModel(PrecisionModel precisionModel) => new PrecisionModel(precisionModel);
NtsGeometryServices.cs(181):public PrecisionModel CreatePrecisionModel(double scale) => new PrecisionModel(scale);
NtsGeometryServices.cs(188):public GeometryFactory CreateGeometryFactory() => CreateGeometryFactory(DefaultSRID);
NtsGeometryServices.cs(195):public GeometryFactory CreateGeometryFactory(int srid) => CreateGeometryFactory(DefaultPrecisionModel, srid, DefaultCoordinateSequenceFactory);
NtsGeometryServices.cs(202):public GeometryFactory CreateGeometryFactory(CoordinateSequenceFactory coordinateSequenceFactory) =>
NtsGeometryServices.cs(211):public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel) =>
NtsGeometryServices.cs(221):public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel, int srid) => CreateGeometryFactory(precisionModel, srid, DefaultCoordinateSequenceFactory);
NtsGeometryServices.cs(231):public GeometryFactory CreateGeometryFactory(PrecisionModel precisionModel, int srid, CoordinateSequenceFactory coordinateSequenceFactory)
NtsGeometryServices.cs(302):public bool Equals(GeometryFactoryKey other)
Operation\BoundaryOp.cs(23):public static Geometry GetBoundary(Geometry g)
Operation\BoundaryOp.cs(36):public static Geometry GetBoundary(Geometry g, IBoundaryNodeRule bnRule)
Operation\BoundaryOp.cs(56):public static bool HasBoundary(Geometry geom, IBoundaryNodeRule boundaryNodeRule)
Operation\BoundaryOp.cs(103):public Geometry GetBoundary()
Operation\Buffer\BufferBuilder.cs(87):public Geometry Buffer(Geometry g, double distance)
Operation\Buffer\BufferCurveSetBuilder.cs(71):public IList<ISegmentString> GetCurves()
Operation\Buffer\BufferInputLineSimplifier.cs(53):public static Coordinate[] Simplify(Coordinate[] inputLine, double distanceTol)
Operation\Buffer\BufferInputLineSimplifier.cs(86):public Coordinate[] Simplify(double distanceTol)
Operation\Buffer\BufferOp.cs(142):public static Geometry Buffer(Geometry g, double distance)
Operation\Buffer\BufferOp.cs(159):public static Geometry Buffer(Geometry g, double distance, BufferParameters parameters)
Operation\Buffer\BufferOp.cs(174):public static Geometry Buffer(Geometry g, double distance, int quadrantSegments)
Operation\Buffer\BufferOp.cs(288):public Geometry GetResultGeometry(double distance)
Operation\Buffer\BufferParameters.cs(128):public static double BufferDistanceError(int quadSegs)
Operation\Buffer\BufferParameters.cs(221):public BufferParameters Copy()
Operation\Buffer\BufferSubgraph.cs(51):public void Create(Node node)
Operation\Buffer\BufferSubgraph.cs(111):public void ComputeDepth(int outsideDepth)
Operation\Buffer\BufferSubgraph.cs(208):public void FindResultEdges()
Operation\Buffer\BufferSubgraph.cs(233):public int CompareTo(object o)
Operation\Buffer\OffsetCurve.cs(50):public static Geometry GetCurve(Geometry geom, double distance)
Operation\Buffer\OffsetCurve.cs(66):public static Geometry GetCurve(Geometry geom, double distance, int quadSegs = -1, JoinStyle joinStyle = JoinStyle.Round, double mitreLimit = -1)
Operation\Buffer\OffsetCurve.cs(121):public Geometry GetCurve()
Operation\Buffer\OffsetCurve.cs(135):public Geometry Map(Geometry geom)
Operation\Buffer\OffsetCurve.cs(174):public static Coordinate[] RawOffset(LineString geom, double distance, BufferParameters bufParams)
Operation\Buffer\OffsetCurve.cs(187):public static Coordinate[] RawOffset(LineString geom, double distance)
Operation\Buffer\OffsetCurveBuilder.cs(48):public Coordinate[] GetLineCurve(Coordinate[] inputPts, double distance)
Operation\Buffer\OffsetCurveBuilder.cs(86):public bool IsLineOffsetEmpty(double distance)
Operation\Buffer\OffsetCurveBuilder.cs(103):public Coordinate[] GetRingCurve(Coordinate[] inputPts, Positions side, double distance)
Operation\Buffer\OffsetCurveBuilder.cs(112):public Coordinate[] GetRingCurve(Coordinate[] inputPts, Position side, double distance)
Operation\Buffer\OffsetCurveBuilder.cs(128):public Coordinate[] GetOffsetCurve(Coordinate[] inputPts, double distance)
Operation\Buffer\OffsetCurveSetBuilder.cs(70):public IList<ISegmentString> GetCurves()
Operation\Buffer\OffsetCurveVertexList.cs(45):public void AddPt(Coordinate pt)
Operation\Buffer\OffsetCurveVertexList.cs(75):public void CloseRing()
Operation\Buffer\OffsetSegmentGenerator.cs(135):public void InitSideSegments(Coordinate s1, Coordinate s2, Positions side) =>
Operation\Buffer\OffsetSegmentGenerator.cs(138):public void InitSideSegments(Coordinate s1, Coordinate s2, Position side)
Operation\Buffer\OffsetSegmentGenerator.cs(147):public Coordinate[] GetCoordinates()
Operation\Buffer\OffsetSegmentGenerator.cs(153):public void CloseRing()
Operation\Buffer\OffsetSegmentGenerator.cs(158):public void AddSegments(Coordinate[] pt, bool isForward)
Operation\Buffer\OffsetSegmentGenerator.cs(163):public void AddFirstSegment()
Operation\Buffer\OffsetSegmentGenerator.cs(171):public void AddLastSegment()
Operation\Buffer\OffsetSegmentGenerator.cs(178):public void AddNextSegment(Coordinate p, bool addStartPoint)
Operation\Buffer\OffsetSegmentGenerator.cs(398):public void AddLineEndCap(Coordinate p0, Coordinate p1)
Operation\Buffer\OffsetSegmentGenerator.cs(642):public void CreateCircle(Coordinate p)
Operation\Buffer\OffsetSegmentGenerator.cs(654):public void CreateSquare(Coordinate p)
Operation\Buffer\OffsetSegmentString.cs(41):public void AddPt(Coordinate pt)
Operation\Buffer\OffsetSegmentString.cs(52):public void AddPts(Coordinate[] pt, bool isForward)
Operation\Buffer\OffsetSegmentString.cs(88):public void CloseRing()
Operation\Buffer\OffsetSegmentString.cs(99):public void Reverse()
Operation\Buffer\OffsetSegmentString.cs(103):public Coordinate[] GetCoordinates()
Operation\Buffer\OldOffsetCurveBuilder.cs(110):public IList<Coordinate[]> GetLineCurve(Coordinate[] inputPts, double distance)
Operation\Buffer\OldOffsetCurveBuilder.cs(145):public IList<Coordinate[]> GetRingCurve(Coordinate[] inputPts, Positions side, double distance)
Operation\Buffer\OldOffsetCurveBuilder.cs(152):public IList<Coordinate[]> GetRingCurve(Coordinate[] inputPts, Position side, double distance)
Operation\Buffer\RightmostEdgeFinder.cs(35):public void FindEdge(IList dirEdgeList)
Operation\Buffer\SegmentMCIndex.cs(37):public void Query(Envelope env, MonotoneChainSelectAction action)
Operation\Buffer\SegmentMCIndex.cs(54):public void VisitItem(Index.Chain.MonotoneChain item)
Operation\Buffer\SubgraphDepthLocater.cs(36):public int GetDepth(Coordinate p)
Operation\Buffer\SubgraphDepthLocater.cs(174):public int CompareTo(DepthSegment other)
Operation\Buffer\Validate\BufferCurveMaximumDistanceFinder.cs(28):public double FindDistance(Geometry bufferCurve)
Operation\Buffer\Validate\BufferCurveMaximumDistanceFinder.cs(62):public void Filter(Coordinate pt)
Operation\Buffer\Validate\BufferCurveMaximumDistanceFinder.cs(84):public void Filter(CoordinateSequence seq, int index)
Operation\Buffer\Validate\BufferDistanceValidator.cs(58):public bool IsValid()
Operation\Buffer\Validate\BufferResultValidator.cs(29):public static bool IsValid(Geometry g, double distance, Geometry result)
Operation\Buffer\Validate\BufferResultValidator.cs(45):public static string IsValidMessage(Geometry g, double distance, Geometry result)
Operation\Buffer\Validate\BufferResultValidator.cs(68):public bool IsValid()
Operation\Buffer\Validate\DistanceToPointFinder.cs(11):public static void ComputeDistance(Geometry geom, Coordinate pt, PointPairDistance ptDist)
Operation\Buffer\Validate\DistanceToPointFinder.cs(37):public static void ComputeDistance(LineString line, Coordinate pt, PointPairDistance ptDist)
Operation\Buffer\Validate\DistanceToPointFinder.cs(50):public static void ComputeDistance(LineSegment segment, Coordinate pt, PointPairDistance ptDist)
Operation\Buffer\Validate\DistanceToPointFinder.cs(56):public static void ComputeDistance(Polygon poly, Coordinate pt, PointPairDistance ptDist)
Operation\Buffer\Validate\PointPairDistance.cs(16):public void Initialize() { _isNull = true; }
Operation\Buffer\Validate\PointPairDistance.cs(18):public void Initialize(Coordinate p0, Coordinate p1)
Operation\Buffer\Validate\PointPairDistance.cs(44):public Coordinate GetCoordinate(int i) { return _pt[i]; }
Operation\Buffer\Validate\PointPairDistance.cs(46):public void SetMaximum(PointPairDistance ptDist)
Operation\Buffer\Validate\PointPairDistance.cs(51):public void SetMaximum(Coordinate p0, Coordinate p1)
Operation\Buffer\Validate\PointPairDistance.cs(63):public void SetMinimum(PointPairDistance ptDist)
Operation\Buffer\Validate\PointPairDistance.cs(68):public void SetMinimum(Coordinate p0, Coordinate p1)
Operation\Buffer\VariableBuffer.cs(26):public static Geometry Buffer(Geometry line, double startDistance,
Operation\Buffer\VariableBuffer.cs(48):public static Geometry Buffer(Geometry line, double startDistance,
Operation\Buffer\VariableBuffer.cs(65):public static Geometry Buffer(Geometry line, double[] distance)
Operation\Buffer\VariableBuffer.cs(212):public Geometry GetResult()
Operation\Distance3D\AxisPlaneCoordinateSequence.cs(24):public static CoordinateSequence ProjectToXY(CoordinateSequence seq)
Operation\Distance3D\AxisPlaneCoordinateSequence.cs(38):public static CoordinateSequence ProjectToXZ(CoordinateSequence seq)
Operation\Distance3D\AxisPlaneCoordinateSequence.cs(48):public static CoordinateSequence ProjectToYZ(CoordinateSequence seq)
Operation\Distance3D\Distance3DOp.cs(35):public static double Distance(Geometry g0, Geometry g1)
Operation\Distance3D\Distance3DOp.cs(48):public static bool IsWithinDistance(Geometry g0, Geometry g1,
Operation\Distance3D\Distance3DOp.cs(62):public static Coordinate[] NearestPoints(Geometry g0, Geometry g1)
Operation\Distance3D\Distance3DOp.cs(108):public double Distance()
Operation\Distance3D\Distance3DOp.cs(125):public Coordinate[] NearestPoints()
Operation\Distance3D\Distance3DOp.cs(141):public GeometryLocation[] NearestLocations()
Operation\Distance3D\PlanarPolygon3D.cs(126):public bool Intersects(Coordinate intPt)
Operation\Distance3D\PlanarPolygon3D.cs(153):public bool Intersects(Coordinate pt, LineString ring)
Operation\Distance\ConnectedElementLocationFilter.cs(22):public static IList<GeometryLocation> GetLocations(Geometry geom)
Operation\Distance\ConnectedElementLocationFilter.cs(44):public void Filter(Geometry geom)
Operation\Distance\ConnectedElementPointFilter.cs(19):public static IList<Coordinate> GetCoordinates(Geometry geom)
Operation\Distance\ConnectedElementPointFilter.cs(41):public void Filter(Geometry geom)
Operation\Distance\DistanceOp.cs(32):public static double Distance(Geometry g0, Geometry g1)
Operation\Distance\DistanceOp.cs(45):public static bool IsWithinDistance(Geometry g0, Geometry g1, double distance)
Operation\Distance\DistanceOp.cs(65):public static Coordinate[] NearestPoints(Geometry g0, Geometry g1)
Operation\Distance\DistanceOp.cs(107):public double Distance()
Operation\Distance\DistanceOp.cs(122):public Coordinate[] NearestPoints()
Operation\Distance\DistanceOp.cs(135):public GeometryLocation[] NearestLocations()
Operation\Distance\FacetSequence.cs(85):public Coordinate GetCoordinate(int index)
Operation\Distance\FacetSequence.cs(101):public double Distance(FacetSequence facetSeq)
Operation\Distance\FacetSequence.cs(137):public GeometryLocation[] NearestLocations(FacetSequence facetSeq)
Operation\Distance\FacetSequenceTreeBuilder.cs(25):public static STRtree<FacetSequence> BuildSTRtree(Geometry g)
Operation\Distance\IndexedFacedDistance.cs(51):public static double Distance(Geometry g1, Geometry g2)
Operation\Distance\IndexedFacedDistance.cs(64):public static bool IsWithinDistance(Geometry g1, Geometry g2, double distance)
Operation\Distance\IndexedFacedDistance.cs(76):public static Coordinate[] NearestPoints(Geometry g1, Geometry g2)
Operation\Distance\IndexedFacedDistance.cs(113):public double Distance(Geometry g)
Operation\Distance\IndexedFacedDistance.cs(128):public GeometryLocation[] NearestLocations(Geometry g)
Operation\Distance\IndexedFacedDistance.cs(143):public Coordinate[] NearestPoints(Geometry g)
Operation\Distance\IndexedFacedDistance.cs(165):public bool IsWithinDistance(Geometry g, double maxDistance)
Operation\Distance\IndexedFacedDistance.cs(178):public double Distance(IBoundable<Envelope, FacetSequence> item1, IBoundable<Envelope, FacetSequence> item2)
Operation\GeometryGraphOperation.cs(72):public Geometry GetArgGeometry(int i)
Operation\IsSimpleOp.cs(80):public bool IsSimple()
Operation\IsSimpleOp.cs(226):public void AddEndpoint(bool isClosed)
Operation\Linemerge\EdgeString.cs(30):public void Add(LineMergeDirectedEdge directedEdge)
Operation\Linemerge\EdgeString.cs(65):public LineString ToLineString()
Operation\Linemerge\LineMergeGraph.cs(18):public void AddEdge(LineString lineString)
Operation\Linemerge\LineMerger.cs(47):public void Filter(Geometry component)
Operation\Linemerge\LineMerger.cs(65):public void Add(Geometry geometry)
Operation\Linemerge\LineMerger.cs(76):public void Add(IEnumerable<Geometry> geometries)
Operation\Linemerge\LineMerger.cs(198):public IList<Geometry> GetMergedLineStrings()
Operation\Linemerge\LineSequencer.cs(58):public static bool IsSequenced(Geometry geom)
Operation\Linemerge\LineSequencer.cs(115):public void Add(IEnumerable<Geometry> geometries)
Operation\Linemerge\LineSequencer.cs(128):public void Add(Geometry geometry)
Operation\Linemerge\LineSequencer.cs(155):public void Filter(Geometry component)
Operation\Linemerge\LineSequencer.cs(175):public bool IsSequenceable()
Operation\Linemerge\LineSequencer.cs(187):public Geometry GetSequencedLineStrings()
Operation\OverlayNG\CoverageUnion.cs(48):public static Geometry Union(Geometry coverage)
Operation\OverlayNG\Edge.cs(35):public static bool IsCollapsed(Coordinate[] pts)
Operation\OverlayNG\Edge.cs(64):public Coordinate GetCoordinate(int index)
Operation\OverlayNG\Edge.cs(114):public bool RelativeDirection(Edge edge)
Operation\OverlayNG\Edge.cs(124):public OverlayLabel CreateLabel()
Operation\OverlayNG\Edge.cs(246):public void Merge(Edge edge)
Operation\OverlayNG\Edge.cs(292):public string ToLineString()
Operation\OverlayNG\Edge.cs(310):public static string InfoString(int index, Dimension dim, bool isHole, int depthDelta)
Operation\OverlayNG\EdgeKey.cs(16):public static EdgeKey Create(Edge edge)
Operation\OverlayNG\EdgeKey.cs(48):public int CompareTo(EdgeKey ek)
Operation\OverlayNG\EdgeMerger.cs(35):public static IList<Edge> Merge(List<Edge> edges)
Operation\OverlayNG\EdgeNodingBuilder.cs(125):public bool HasEdgesFor(int geomIndex)
Operation\OverlayNG\EdgeNodingBuilder.cs(140):public IList<Edge> Build(Geometry geom0, Geometry geom1)
Operation\OverlayNG\ElevationModel.cs(40):public static ElevationModel Create(Geometry geom1, Geometry geom2)
Operation\OverlayNG\ElevationModel.cs(101):public void Add(Geometry geom)
Operation\OverlayNG\ElevationModel.cs(153):public double GetZ(double x, double y)
Operation\OverlayNG\ElevationModel.cs(170):public void PopulateZ(Geometry geom)
Operation\OverlayNG\ElevationModel.cs(225):public void Filter(CoordinateSequence seq)
Operation\OverlayNG\ElevationModel.cs(264):public void Filter(CoordinateSequence seq)
Operation\OverlayNG\ElevationModel.cs(289):public void Add(double z)
Operation\OverlayNG\ElevationModel.cs(295):public void Compute()
Operation\OverlayNG\IndexedPointOnLineLocator.cs(22):public Location Locate(Coordinate p)
Operation\OverlayNG\InputGeometry.cs(32):public Dimension GetDimension(int index)
Operation\OverlayNG\InputGeometry.cs(38):public Geometry GetGeometry(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(43):public Envelope GetEnvelope(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(48):public bool IsEmpty(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(53):public bool IsArea(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(64):public int GetAreaIndex()
Operation\OverlayNG\InputGeometry.cs(71):public bool IsLine(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(93):public bool HasEdges(int geomIndex)
Operation\OverlayNG\InputGeometry.cs(107):public Location LocatePointInArea(int geomIndex, Coordinate pt)
Operation\OverlayNG\InputGeometry.cs(144):public void SetCollapsed(int geomIndex, bool isGeomCollapsed)
Operation\OverlayNG\LineBuilder.cs(81):public List<LineString> GetLines()
Operation\OverlayNG\LineLimiter.cs(45):public List<Coordinate[]> Limit(IEnumerable<Coordinate> pts)
Operation\OverlayNG\MaximalEdgeRing.cs(40):public static void LinkResultAreaMaxRingAtNode(OverlayEdge nodeEdge)
Operation\OverlayNG\MaximalEdgeRing.cs(121):public List<OverlayEdgeRing> BuildMinimalRings(GeometryFactory geometryFactory)
Operation\OverlayNG\OverlayEdge.cs(18):public static OverlayEdge CreateEdge(Coordinate[] pts, OverlayLabel lbl, bool direction)
Operation\OverlayNG\OverlayEdge.cs(36):public static OverlayEdge CreateEdgePair(Coordinate[] pts, OverlayLabel lbl)
Operation\OverlayNG\OverlayEdge.cs(68):public Location GetLocation(int index, Position position)
Operation\OverlayNG\OverlayEdge.cs(103):public void AddCoordinates(CoordinateList coords)
Operation\OverlayNG\OverlayEdge.cs(155):public void UnmarkFromResultAreaBoth()
Operation\OverlayNG\OverlayEdge.cs(161):public void MarkInResultArea()
Operation\OverlayNG\OverlayEdge.cs(166):public void MarkInResultAreaBoth()
Operation\OverlayNG\OverlayEdge.cs(174):public void MarkInResultLine()
Operation\OverlayNG\OverlayEdge.cs(211):public void MarkVisitedBoth()
Operation\OverlayNG\OverlayEdgeRing.cs(53):public void AddHole(OverlayEdgeRing ring) { _holes.Add(ring); }
Operation\OverlayNG\OverlayEdgeRing.cs(115):public OverlayEdgeRing FindEdgeRingContaining(IEnumerable<OverlayEdgeRing> erList)
Operation\OverlayNG\OverlayEdgeRing.cs(161):public bool IsInRing(Coordinate pt)
Operation\OverlayNG\OverlayEdgeRing.cs(179):public Polygon ToPolygon(GeometryFactory factory)
Operation\OverlayNG\OverlayGraph.cs(46):public OverlayEdge GetNodeEdge(Coordinate nodePt)
Operation\OverlayNG\OverlayGraph.cs(56):public IReadOnlyCollection<OverlayEdge> GetResultAreaEdges()
Operation\OverlayNG\OverlayGraph.cs(77):public OverlayEdge AddEdge(Coordinate[] pts, OverlayLabel label)
Operation\OverlayNG\OverlayLabel.cs(191):public Dimension Dimension(int index)
Operation\OverlayNG\OverlayLabel.cs(205):public void InitBoundary(int index, Location locLeft, Location locRight, bool isHole)
Operation\OverlayNG\OverlayLabel.cs(235):public void InitCollapse(int index, bool isHole)
Operation\OverlayNG\OverlayLabel.cs(253):public void InitLine(int index)
Operation\OverlayNG\OverlayLabel.cs(271):public void InitNotPart(int index)
Operation\OverlayNG\OverlayLabel.cs(292):public void SetLocationLine(int index, Location loc)
Operation\OverlayNG\OverlayLabel.cs(309):public void SetLocationAll(int index, Location loc)
Operation\OverlayNG\OverlayLabel.cs(334):public void SetLocationCollapse(int index)
Operation\OverlayNG\OverlayLabel.cs(361):public bool IsLineAt(int index)
Operation\OverlayNG\OverlayLabel.cs(375):public bool IsLinear(int index)
Operation\OverlayNG\OverlayLabel.cs(389):public bool IsKnown(int index)
Operation\OverlayNG\OverlayLabel.cs(404):public bool IsNotPart(int index)
Operation\OverlayNG\OverlayLabel.cs(462):public bool IsBoundary(int index)
Operation\OverlayNG\OverlayLabel.cs(490):public bool IsLineLocationUnknown(int index)
Operation\OverlayNG\OverlayLabel.cs(508):public bool IsLineInArea(int index)
Operation\OverlayNG\OverlayLabel.cs(522):public bool IsHole(int index)
Operation\OverlayNG\OverlayLabel.cs(539):public bool IsCollapse(int index)
Operation\OverlayNG\OverlayLabel.cs(579):public Location GetLineLocation(int index)
Operation\OverlayNG\OverlayLabel.cs(596):public bool IsLineInterior(int index)
Operation\OverlayNG\OverlayLabel.cs(613):public Location GetLocation(int index, Position position, bool isForward)
Operation\OverlayNG\OverlayLabel.cs(644):public Location GetLocationBoundaryOrLine(int index, Position position, bool isForward)
Operation\OverlayNG\OverlayLabel.cs(658):public Location GetLocation(int index)
Operation\OverlayNG\OverlayLabel.cs(673):public bool HasSides(int index)
Operation\OverlayNG\OverlayLabel.cs(688):public OverlayLabel Copy()
Operation\OverlayNG\OverlayLabel.cs(698):public string ToString(bool isForward)
Operation\OverlayNG\OverlayLabel.cs(735):public static char RingRoleSymbol(bool isHole)
Operation\OverlayNG\OverlayLabel.cs(745):public static char DimensionSymbol(Dimension dim)
Operation\OverlayNG\OverlayLabeller.cs(31):public void ComputeLabelling()
Operation\OverlayNG\OverlayLabeller.cs(75):public void PropagateAreaLocations(OverlayEdge nodeEdge, int geomIndex)
Operation\OverlayNG\OverlayLabeller.cs(441):public void MarkResultAreaEdges(SpatialFunction overlayOpCode)
Operation\OverlayNG\OverlayLabeller.cs(458):public void MarkInResultArea(OverlayEdge e, SpatialFunction overlayOpCode)
Operation\OverlayNG\OverlayLabeller.cs(478):public void UnmarkDuplicateEdgesFromResultArea()
Operation\OverlayNG\OverlayLabeller.cs(489):public static string ToString(OverlayEdge nodeEdge)
Operation\OverlayNG\OverlayMixedPoints.cs(42):public static Geometry Overlay(SpatialFunction opCode, Geometry geom0, Geometry geom1, PrecisionModel pm)
Operation\OverlayNG\OverlayMixedPoints.cs(84):public Geometry GetResult()
Operation\OverlayNG\OverlayNG.cs(177):public static Geometry Overlay(Geometry geom0, Geometry geom1,
Operation\OverlayNG\OverlayNG.cs(195):public static Geometry Overlay(Geometry geom0, Geometry geom1,
Operation\OverlayNG\OverlayNG.cs(213):public static Geometry Overlay(Geometry geom0, Geometry geom1,
Operation\OverlayNG\OverlayNG.cs(242):public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode)
Operation\OverlayNG\OverlayNG.cs(421):public Geometry GetResult()
Operation\OverlayNG\OverlayNGRobust.cs(45):public static Geometry Union(Geometry geom)
Operation\OverlayNG\OverlayNGRobust.cs(58):public static Geometry Union(IEnumerable<Geometry> geoms)
Operation\OverlayNG\OverlayNGRobust.cs(72):public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact)
Operation\OverlayNG\OverlayNGRobust.cs(92):public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode)
Operation\OverlayNG\OverlayNGRobust.cs(333):public static Geometry OverlaySR(Geometry geom0, Geometry geom1, SpatialFunction opCode)
Operation\OverlayNG\OverlayPoints.cs(30):public static Geometry Overlay(SpatialFunction opCode, Geometry geom0, Geometry geom1, PrecisionModel pm)
Operation\OverlayNG\OverlayPoints.cs(62):public Geometry GetResult()
Operation\OverlayNG\OverlayUtility.cs(343):public static Coordinate Round(Point pt, PrecisionModel pm)
Operation\OverlayNG\OverlayUtility.cs(369):public static bool IsResultAreaConsistent(Geometry geom0, Geometry geom1, SpatialFunction opCode, Geometry result)
Operation\OverlayNG\PolygonBuilder.cs(27):public IReadOnlyList<Polygon> GetPolygons()
Operation\OverlayNG\PolygonBuilder.cs(32):public IReadOnlyList<OverlayEdgeRing> GetShellRings()
Operation\OverlayNG\PrecisionReducer.cs(37):public static Geometry ReducePrecision(Geometry geom, PrecisionModel pm)
Operation\OverlayNG\PrecisionUtility.cs(41):public static double SafeScale(double value)
Operation\OverlayNG\PrecisionUtility.cs(54):public static double SafeScale(Geometry geom)
Operation\OverlayNG\PrecisionUtility.cs(73):public static double SafeScale(Geometry a, Geometry b)
Operation\OverlayNG\PrecisionUtility.cs(156):public static double InherentScale(double value)
Operation\OverlayNG\PrecisionUtility.cs(177):public static double InherentScale(Geometry geom)
Operation\OverlayNG\PrecisionUtility.cs(202):public static double InherentScale(Geometry a, Geometry b)
Operation\OverlayNG\PrecisionUtility.cs(321):public void Filter(CoordinateSequence sequence)
Operation\OverlayNG\PrecisionUtility.cs(359):public static PrecisionModel RobustPM(Geometry a)
Operation\OverlayNG\PrecisionUtility.cs(382):public static double RobustScale(Geometry a, Geometry b)
Operation\OverlayNG\PrecisionUtility.cs(403):public static double RobustScale(Geometry a)
Operation\OverlayNG\RingClipper.cs(69):public Coordinate[] Clip(Coordinate[] pts)
Operation\OverlayNG\RobustClipEnvelopeComputer.cs(17):public static Envelope GetEnvelope(Geometry a, Geometry b, Envelope targetEnv)
Operation\OverlayNG\RobustClipEnvelopeComputer.cs(36):public void Add(Geometry g)
Operation\OverlayNG\UnaryUnionNG.cs(30):public static Geometry Union(Geometry geom, PrecisionModel pm)
Operation\OverlayNG\UnaryUnionNG.cs(46):public static Geometry Union(IEnumerable<Geometry> geoms, PrecisionModel pm)
Operation\OverlayNG\UnaryUnionNG.cs(63):public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact, PrecisionModel pm)
Operation\Overlay\EdgeSetNoder.cs(32):public void AddEdges(IEnumerable<Edge> edges)
Operation\Overlay\LineBuilder.cs(42):public IList<Geometry> Build(SpatialFunction opCode)
Operation\Overlay\LineBuilder.cs(99):public void CollectLineEdge(DirectedEdge de, SpatialFunction opCode, IList<Edge> edges)
Operation\Overlay\LineBuilder.cs(125):public void CollectBoundaryTouchEdge(DirectedEdge de, SpatialFunction opCode, IList<Edge> edges)
Operation\Overlay\MaximalEdgeRing.cs(53):public void LinkDirectedEdgesForMinimalEdgeRings()
Operation\Overlay\MaximalEdgeRing.cs(69):public IList<EdgeRing> BuildMinimalRings()
Operation\Overlay\OverlayOp.cs(60):public static Geometry Overlay(Geometry geom0, Geometry geom1, SpatialFunction opCode)
Operation\Overlay\OverlayOp.cs(78):public static bool IsResultOfOp(Label label, SpatialFunction overlayOpCode)
Operation\Overlay\OverlayOp.cs(97):public static bool IsResultOfOp(Location loc0, Location loc1, SpatialFunction overlayOpCode)
Operation\Overlay\OverlayOp.cs(158):public Geometry GetResultGeometry(SpatialFunction overlayOpCode)
Operation\Overlay\OverlayOp.cs(537):public bool IsCoveredByLA(Coordinate coord)
Operation\Overlay\OverlayOp.cs(548):public bool IsCoveredByA(Coordinate coord)
Operation\Overlay\OverlayOp.cs(606):public static Geometry CreateEmptyResult(SpatialFunction overlayOpCode, Geometry a, Geometry b, GeometryFactory geomFact)
Operation\Overlay\PointBuilder.cs(37):public IList<Geometry> Build(SpatialFunction opCode)
Operation\Overlay\PolygonBuilder.cs(33):public void Add(PlanarGraph graph)
Operation\Overlay\PolygonBuilder.cs(45):public void Add(IList<EdgeEnd> dirEdges, IList<Node> nodes)
Operation\Overlay\Snap\GeometrySnapper.cs(33):public static double ComputeOverlaySnapTolerance(Geometry g)
Operation\Overlay\Snap\GeometrySnapper.cs(61):public static double ComputeSizeBasedSnapTolerance(Geometry g)
Operation\Overlay\Snap\GeometrySnapper.cs(75):public static double ComputeOverlaySnapTolerance(Geometry g0, Geometry g1)
Operation\Overlay\Snap\GeometrySnapper.cs(87):public static Geometry[] Snap(Geometry g0, Geometry g1, double snapTolerance)
Operation\Overlay\Snap\GeometrySnapper.cs(113):public static Geometry SnapToSelf(Geometry geom, double snapTolerance, bool cleanResult)
Operation\Overlay\Snap\GeometrySnapper.cs(137):public Geometry SnapTo(Geometry g, double tolerance)
Operation\Overlay\Snap\GeometrySnapper.cs(152):public Geometry SnapToSelf(double snapTolerance, bool cleanResult)
Operation\Overlay\Snap\LineStringSnapper.cs(60):public Coordinate[] SnapTo(Coordinate[] snapPts)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(18):public static Geometry Overlay(Geometry g0, Geometry g1, SpatialFunction opCode)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(24):public static Geometry Intersection(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(29):public static Geometry Union(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(34):public static Geometry Difference(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(39):public static Geometry SymDifference(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapIfNeededOverlayOp.cs(52):public Geometry GetResultGeometry(SpatialFunction opCode)
Operation\Overlay\Snap\SnapOverlayOp.cs(25):public static Geometry Overlay(Geometry g0, Geometry g1, SpatialFunction opCode)
Operation\Overlay\Snap\SnapOverlayOp.cs(37):public static Geometry Intersection(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapOverlayOp.cs(48):public static Geometry Union(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapOverlayOp.cs(59):public static Geometry Difference(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapOverlayOp.cs(70):public static Geometry SymDifference(Geometry g0, Geometry g1)
Operation\Overlay\Snap\SnapOverlayOp.cs(103):public Geometry GetResultGeometry(SpatialFunction opCode)
Operation\Overlay\Validate\FuzzyPointLocator.cs(34):public Location GetLocation(Coordinate pt)
Operation\Overlay\Validate\FuzzyPointLocator.cs(98):public void Filter(Geometry g)
Operation\Overlay\Validate\OffsetPointGenerator.cs(39):public void SetSidesToGenerate(bool doLeft, bool doRight)
Operation\Overlay\Validate\OffsetPointGenerator.cs(48):public List<Coordinate> GetPoints(double offsetDistance)
Operation\Overlay\Validate\OverlayResultValidator.cs(26):public static bool IsValid(Geometry a, Geometry b, SpatialFunction overlayOp, Geometry result)
Operation\Overlay\Validate\OverlayResultValidator.cs(64):public bool IsValid(SpatialFunction overlayOp)
Operation\Polygonize\EdgeRing.cs(36):public static EdgeRing FindEdgeRingContaining(EdgeRing testEr, IList<EdgeRing> erList)
Operation\Polygonize\EdgeRing.cs(91):public static List<DirectedEdge> FindDirEdgesInRing(PolygonizeDirectedEdge startDE)
Operation\Polygonize\EdgeRing.cs(131):public void Build(PolygonizeDirectedEdge startDE)
Operation\Polygonize\EdgeRing.cs(166):public void ComputeHole()
Operation\Polygonize\EdgeRing.cs(177):public void AddHole(LinearRing hole)
Operation\Polygonize\EdgeRing.cs(188):public void AddHole(EdgeRing holeER)
Operation\Polygonize\EdgeRing.cs(257):public bool IsInRing(Coordinate pt)
Operation\Polygonize\EdgeRing.cs(453):public int Compare(EdgeRing r0, EdgeRing r1)
Operation\Polygonize\HoleAssigner.cs(22):public static void AssignHolesToShells(IEnumerable<EdgeRing> holes, IEnumerable<EdgeRing> shells)
Operation\Polygonize\HoleAssigner.cs(53):public void AssignHolesToShells(IEnumerable<EdgeRing> holes)
Operation\Polygonize\PolygonizeGraph.cs(57):public static void DeleteAllEdges(Node node)
Operation\Polygonize\PolygonizeGraph.cs(83):public void AddEdge(LineString line)
Operation\Polygonize\PolygonizeGraph.cs(190):public IList<EdgeRing> GetEdgeRings()
Operation\Polygonize\PolygonizeGraph.cs(242):public IList<LineString> DeleteCutEdges()
Operation\Polygonize\PolygonizeGraph.cs(385):public ICollection<LineString> DeleteDangles()
Operation\Polygonize\PolygonizeGraph.cs(431):public void ComputeDepthParity()
Operation\Polygonize\Polygonizer.cs(57):public void Filter(Geometry g)
Operation\Polygonize\Polygonizer.cs(126):public void Add(ICollection<Geometry> geomList)
Operation\Polygonize\Polygonizer.cs(139):public void Add(Geometry g)
Operation\Polygonize\Polygonizer.cs(161):public ICollection<Geometry> GetPolygons()
Operation\Polygonize\Polygonizer.cs(172):public Geometry GetGeometry()
Operation\Polygonize\Polygonizer.cs(187):public ICollection<LineString> GetDangles()
Operation\Polygonize\Polygonizer.cs(196):public ICollection<LineString> GetCutEdges()
Operation\Polygonize\Polygonizer.cs(205):public IList<Geometry> GetInvalidRingLines()
Operation\Predicate\RectangleContains.cs(20):public static bool Contains(Polygon rectangle, Geometry b)
Operation\Predicate\RectangleContains.cs(44):public bool Contains(Geometry geom)
Operation\Predicate\RectangleIntersects.cs(35):public static bool Intersects(Polygon rectangle, Geometry b)
Operation\Predicate\RectangleIntersects.cs(60):public bool Intersects(Geometry geom)
Operation\Predicate\SegmentIntersectionTester.cs(29):public bool HasIntersectionWithLineStrings(CoordinateSequence seq, ICollection<Geometry> lines)
Operation\Predicate\SegmentIntersectionTester.cs(46):public bool HasIntersection(CoordinateSequence seq0, CoordinateSequence seq1)
Operation\Relate\EdgeEndBuilder.cs(24):public IList<EdgeEnd> ComputeEdgeEnds(IEnumerable<Edge> edges)
Operation\Relate\EdgeEndBuilder.cs(39):public void ComputeEdgeEnds(Edge edge, IList<EdgeEnd> l)
Operation\Relate\EdgeEndBuilder.cs(80):public void CreateEdgeEndForPrev(Edge edge, IList<EdgeEnd> l, EdgeIntersection eiCurr, EdgeIntersection eiPrev)
Operation\Relate\EdgeEndBuilder.cs(114):public void CreateEdgeEndForNext(Edge edge, IList<EdgeEnd> l, EdgeIntersection eiCurr, EdgeIntersection eiNext)
Operation\Relate\EdgeEndBundle.cs(43):public IEnumerator<EdgeEnd> GetEnumerator()
Operation\Relate\EdgeEndBundle.cs(57):public void Insert(EdgeEnd e)
Operation\Relate\EdgeEndBundle.cs(185):public void UpdateIM(IntersectionMatrix im)
Operation\Relate\EdgeEndBundleStar.cs(46):public void UpdateIM(IntersectionMatrix im)
Operation\Relate\RelateComputer.cs(43):public IntersectionMatrix ComputeIM()
Operation\Relate\RelateNode.cs(33):public void UpdateIMFromEdges(IntersectionMatrix im)
Operation\Relate\RelateNodeGraph.cs(38):public IEnumerator<Node> GetNodeEnumerator()
Operation\Relate\RelateNodeGraph.cs(47):public void Build(GeometryGraph geomGraph)
Operation\Relate\RelateNodeGraph.cs(75):public void ComputeIntersectionNodes(GeometryGraph geomGraph, int argIndex)
Operation\Relate\RelateNodeGraph.cs(102):public void CopyNodesAndLabels(GeometryGraph geomGraph, int argIndex)
Operation\Relate\RelateNodeGraph.cs(115):public void InsertEdgeEnds(IList<EdgeEnd> ee)
Operation\Relate\RelateOp.cs(35):public static IntersectionMatrix Relate(Geometry a, Geometry b)
Operation\Relate\RelateOp.cs(50):public static IntersectionMatrix Relate(Geometry a, Geometry b, IBoundaryNodeRule boundaryNodeRule)
Operation\Union\CascadedPolygonUnion.cs(89):public static Geometry Union(ICollection<Geometry> polys)
Operation\Union\CascadedPolygonUnion.cs(102):public static Geometry Union(ICollection<Geometry> polys, UnionStrategy unionStrategy)
Operation\Union\CascadedPolygonUnion.cs(175):public Geometry Union()
Operation\Union\InputExtracter.cs(22):public static InputExtracter Extract(IEnumerable<Geometry> geoms)
Operation\Union\InputExtracter.cs(34):public static InputExtracter Extract(Geometry geom)
Operation\Union\InputExtracter.cs(80):public IList<Geometry> GetExtract(Dimension dim)
Operation\Union\InputExtracter.cs(109):public void Filter(Geometry geom)
Operation\Union\OverlapUnion.cs(69):public static Geometry Union(Geometry g0, Geometry g1)
Operation\Union\OverlapUnion.cs(83):public static Geometry Union(Geometry g0, Geometry g1, UnionStrategy unionFun)
Operation\Union\OverlapUnion.cs(129):public Geometry Union()
Operation\Union\OverlapUnion.cs(295):public void Filter(CoordinateSequence seq, int i)
Operation\Union\PointGeometryUnion.cs(30):public static Geometry Union(IPuntal pointGeom, Geometry otherGeom)
Operation\Union\PointGeometryUnion.cs(36):public Geometry Union()
Operation\Union\UnaryUnionOp.cs(54):public static Geometry Union(IEnumerable<Geometry> geoms)
Operation\Union\UnaryUnionOp.cs(69):public static Geometry Union(IEnumerable<Geometry> geoms, GeometryFactory geomFact)
Operation\Union\UnaryUnionOp.cs(81):public static Geometry Union(Geometry geom)
Operation\Union\UnaryUnionOp.cs(163):public Geometry Union()
Operation\Union\UnionInteracting.cs(14):public static Geometry Union(Geometry g0, Geometry g1)
Operation\Union\UnionInteracting.cs(37):public Geometry Union()
Operation\Valid\ConnectedInteriorTester.cs(30):public static Coordinate FindDifferentPoint(Coordinate[] coord, Coordinate pt)
Operation\Valid\ConnectedInteriorTester.cs(64):public bool IsInteriorsConnected()
Operation\Valid\IndexedNestedHoleTester.cs(58):public bool IsNested()
Operation\Valid\IndexedNestedPolygonTester.cs(68):public bool IsNested()
Operation\Valid\IndexedNestedRingTester.cs(32):public void Add(LinearRing ring)
Operation\Valid\IndexedNestedRingTester.cs(38):public bool IsNonNested()
Operation\Valid\IsSimpleOp.cs(66):public static bool IsSimple(Geometry geom)
Operation\Valid\IsSimpleOp.cs(77):public static Coordinate GetNonSimpleLocation(Geometry geom)
Operation\Valid\IsSimpleOp.cs(117):public bool IsSimple()
Operation\Valid\IsSimpleOp.cs(358):public void ProcessIntersections(ISegmentString ss0, int segIndex0, ISegmentString ss1, int segIndex1)
Operation\Valid\IsValidOp.cs(23):public static bool CheckValid(Geometry geom)
Operation\Valid\IsValidOp.cs(37):public static bool IsValidCoordinate(Coordinate coord)
Operation\Valid\IsValidOp.cs(55)://public static bool IsValid(Coordinate coord)
Operation\Valid\IsValidOp.cs(635):public static Coordinate FindPointNotNode(Coordinate[] testCoords, LinearRing searchRing, GeometryGraph graph)
Operation\Valid\PolygonIntersectionAnalyzer.cs(50):public void ProcessIntersections(ISegmentString ss0, int segIndex0, ISegmentString ss1, int segIndex1)
Operation\Valid\PolygonNode.cs(26):public static bool IsCrossing(Coordinate nodePt, Coordinate a0, Coordinate a1, Coordinate b0, Coordinate b1)
Operation\Valid\PolygonNode.cs(56):public static bool IsInteriorSegment(Coordinate nodePt, Coordinate a0, Coordinate a1, Coordinate b)
Operation\Valid\PolygonRing.cs(40):public static bool IsShell(PolygonRing polyRing)
Operation\Valid\PolygonRing.cs(54):public static bool AddTouch(PolygonRing ring0, PolygonRing ring1, Coordinate pt)
Operation\Valid\PolygonRing.cs(79):public static Coordinate FindHoleCycleLocation(IEnumerable<PolygonRing> polyRings)
Operation\Valid\PolygonRing.cs(100):public static Coordinate FindInteriorSelfNode(IEnumerable<PolygonRing> polyRings)
Operation\Valid\PolygonRing.cs(349):public Coordinate FindInteriorSelfNode()
Operation\Valid\PolygonRing.cs(410):public bool IsAtLocation(Coordinate pt)
Operation\Valid\PolygonRing.cs(469):public bool IsExterior(bool isInteriorOnRight)
Operation\Valid\PolygonTopologyAnalyzer.cs(34):public static bool IsRingNested(LineString test, LineString target)
Operation\Valid\PolygonTopologyAnalyzer.cs(190):public static Coordinate FindSelfIntersection(LinearRing ring)
Operation\Valid\PolygonTopologyAnalyzer.cs(236):public bool IsInteriorDisconnected()
Operation\Valid\PolygonTopologyAnalyzer.cs(281):public bool CheckInteriorDisconnectedByHoleCycle()
Operation\Valid\PolygonTopologyAnalyzer.cs(300):public void CheckInteriorDisconnectedBySelfTouch()
Operation\Valid\RepeatedPointTester.cs(27):public bool HasRepeatedPoint(Geometry g)
Operation\Valid\RepeatedPointTester.cs(54):public bool HasRepeatedPoint(Coordinate[] coord)
Operation\Valid\RepeatedPointTester.cs(72):public bool HasRepeatedPoint(CoordinateSequence sequence)
Planargraph\Algorithm\ConnectedSubgraphFinder.cs(21):public IList<Subgraph> GetConnectedSubgraphs()
Planargraph\DirectedEdge.cs(25):public static IList<Edge> ToEdges(IList<DirectedEdge> dirEdges)
Planargraph\DirectedEdge.cs(156):public int CompareTo(object obj)
Planargraph\DirectedEdge.cs(176):public int CompareDirection(DirectedEdge e)
Planargraph\DirectedEdge.cs(192):public void Write(StreamWriter outstream)
Planargraph\DirectedEdgeStar.cs(30):public void Add(DirectedEdge de)
Planargraph\DirectedEdgeStar.cs(40):public void Remove(DirectedEdge de)
Planargraph\DirectedEdgeStar.cs(48):public IEnumerator<DirectedEdge> GetEnumerator()
Planargraph\DirectedEdgeStar.cs(105):public int GetIndex(Edge edge)
Planargraph\DirectedEdgeStar.cs(123):public int GetIndex(DirectedEdge dirEdge)
Planargraph\DirectedEdgeStar.cs(141):public int GetIndex(int i)
Planargraph\DirectedEdgeStar.cs(157):public DirectedEdge GetNextEdge(DirectedEdge dirEdge)
Planargraph\DirectedEdgeStar.cs(168):public DirectedEdge GetNextCWEdge(DirectedEdge dirEdge)
Planargraph\Edge.cs(41):public void SetDirectedEdges(DirectedEdge de0, DirectedEdge de1)
Planargraph\Edge.cs(57):public DirectedEdge GetDirEdge(int i)
Planargraph\Edge.cs(68):public DirectedEdge GetDirEdge(Node fromNode)
Planargraph\Edge.cs(85):public Node GetOppositeNode(Node node)
Planargraph\GraphComponent.cs(28):public static void SetVisited(IEnumerator i, bool visited)
Planargraph\GraphComponent.cs(43):public static void SetMarked(IEnumerator i, bool marked)
Planargraph\GraphComponent.cs(60):public static GraphComponent GetComponentWithVisitedState(IEnumerator i, bool visitedState)
Planargraph\Node.cs(22):public static IList<DirectedEdge> GetEdgesBetween(Node node0, Node node1)
Planargraph\Node.cs(67):public void AddOutEdge(DirectedEdge de)
Planargraph\Node.cs(88):public int GetIndex(Edge edge)
Planargraph\Node.cs(96):public void Remove(DirectedEdge de)
Planargraph\NodeMap.cs(24):public Node Add(Node n)
Planargraph\NodeMap.cs(35):public Node Remove(Coordinate pt)
Planargraph\NodeMap.cs(49):public Node Find(Coordinate coord)
Planargraph\NodeMap.cs(61):public IEnumerator<Node> GetEnumerator()
Planargraph\PlanarGraph.cs(41):public Node FindNode(Coordinate pt)
Planargraph\PlanarGraph.cs(84):public IEnumerator<Node> GetNodeEnumerator()
Planargraph\PlanarGraph.cs(99):public IEnumerator<DirectedEdge> GetDirEdgeEnumerator()
Planargraph\PlanarGraph.cs(109):public IEnumerator<Edge> GetEdgeEnumerator()
Planargraph\PlanarGraph.cs(130):public void Remove(Edge edge)
Planargraph\PlanarGraph.cs(146):public void Remove(DirectedEdge de)
Planargraph\PlanarGraph.cs(161):public void Remove(Node node)
Planargraph\PlanarGraph.cs(188):public IList<Node> FindNodesOfDegree(int degree)
Planargraph\Subgraph.cs(50):public PlanarGraph GetParent()
Planargraph\Subgraph.cs(60):public void Add(Edge e)
Planargraph\Subgraph.cs(79):public IEnumerator<DirectedEdge> GetDirEdgeEnumerator()
Planargraph\Subgraph.cs(89):public IEnumerator<Edge> GetEdgeEnumerator()
Planargraph\Subgraph.cs(98):public IEnumerator<Node> GetNodeEnumerator()
Planargraph\Subgraph.cs(108):public bool Contains(Edge e)
Precision\CommonBits.cs(22):public static long SignExpBits(long num)
Precision\CommonBits.cs(37):public static int NumCommonMostSigMantissaBits(long num1, long num2)
Precision\CommonBits.cs(55):public static long ZeroLowerBits(long bits, int nBits)
Precision\CommonBits.cs(69):public static int GetBit(long bits, int i)
Precision\CommonBits.cs(91):public void Add(double num)
Precision\CommonBits.cs(122):public string ToString(long bits)
Precision\CommonBitsOp.cs(39):public Geometry Intersection(Geometry geom0, Geometry geom1)
Precision\CommonBitsOp.cs(51):public Geometry Union(Geometry geom0, Geometry geom1)
Precision\CommonBitsOp.cs(63):public Geometry Difference(Geometry geom0, Geometry geom1)
Precision\CommonBitsOp.cs(76):public Geometry SymDifference(Geometry geom0, Geometry geom1)
Precision\CommonBitsOp.cs(88):public Geometry Buffer(Geometry geom0, double distance)
Precision\CommonBitsRemover.cs(51):public void Add(Geometry geom)
Precision\CommonBitsRemover.cs(68):public Geometry RemoveCommonBits(Geometry geom)
Precision\CommonBitsRemover.cs(86):public void AddCommonBits(Geometry geom)
Precision\CommonBitsRemover.cs(105):public void Filter(Coordinate coord)
Precision\CommonBitsRemover.cs(137):public void Filter(CoordinateSequence seq, int i)
Precision\CoordinatePrecisionReducerFilter.cs(32):public void Filter(CoordinateSequence seq, int i)
Precision\EnhancedPrecisionOp.cs(23):public static Geometry Intersection(Geometry geom0, Geometry geom1)
Precision\EnhancedPrecisionOp.cs(61):public static Geometry Union(Geometry geom0, Geometry geom1)
Precision\EnhancedPrecisionOp.cs(99):public static Geometry Difference(Geometry geom0, Geometry geom1)
Precision\EnhancedPrecisionOp.cs(137):public static Geometry SymDifference(Geometry geom0, Geometry geom1)
Precision\GeometryPrecisionReducer.cs(58):public static Geometry Reduce(Geometry g, PrecisionModel precModel)
Precision\GeometryPrecisionReducer.cs(75):public static Geometry ReduceKeepCollapsed(Geometry geom, PrecisionModel pm)
Precision\GeometryPrecisionReducer.cs(94):public static Geometry ReducePointwise(Geometry g, PrecisionModel precModel)
Precision\GeometryPrecisionReducer.cs(157):public Geometry Reduce(Geometry geom)
Precision\MinimumClearance.cs(88):public static double GetDistance(Geometry g)
Precision\MinimumClearance.cs(102):public static Geometry GetLine(Geometry g)
Precision\MinimumClearance.cs(131):public double GetDistance()
Precision\MinimumClearance.cs(146):public LineString GetLine()
Precision\MinimumClearance.cs(202):public double Distance(IBoundable<Envelope, FacetSequence> b1, IBoundable<Envelope, FacetSequence> b2)
Precision\MinimumClearance.cs(210):public double Distance(FacetSequence fs1, FacetSequence fs2)
Precision\PointwisePrecisionReducerTransformer.cs(14):public static Geometry Reduce(Geometry geom, PrecisionModel targetPM)
Precision\PrecisionReducerTransformer.cs(20):public static Geometry Reduce(Geometry geom, PrecisionModel targetPM, bool isRemoveCollapsed)
Precision\SimpleMinimumClearance.cs(20):public static double GetDistance(Geometry g)
Precision\SimpleMinimumClearance.cs(26):public static Geometry GetLine(Geometry g)
Precision\SimpleMinimumClearance.cs(41):public double GetDistance()
Precision\SimpleMinimumClearance.cs(47):public LineString GetLine()
Precision\SimpleMinimumClearance.cs(94):public void Filter(Coordinate coord)
Precision\SimpleMinimumClearance.cs(111):public void Filter(CoordinateSequence seq, int i)
Shape\CubicBezierCurve.cs(34):public static Geometry Create(Geometry geom, double alpha)
Shape\CubicBezierCurve.cs(50):public static Geometry Create(Geometry geom, double alpha, double skew)
Shape\CubicBezierCurve.cs(71):public static Geometry Create(Geometry geom, Geometry controlPoints)
Shape\CubicBezierCurve.cs(149):public Geometry GetResult()
Shape\Fractal\HilbertCode.cs(55):public static int Size(int level)
Shape\Fractal\HilbertCode.cs(68):public static int MaxOrdinate(int level)
Shape\Fractal\HilbertCode.cs(80):public static int Level(int numPoints)
Shape\Fractal\HilbertCode.cs(111):public static int Encode(int level, int x, int y)
Shape\Fractal\HilbertCode.cs(199):public static Coordinate Decode(int level, int index)
Shape\Fractal\MortonCode.cs(57):public static int Size(int level)
Shape\Fractal\MortonCode.cs(70):public static int MaxOrdinate(int level)
Shape\Fractal\MortonCode.cs(82):public static int Level(int numPoints)
Shape\Fractal\MortonCode.cs(110):public static int Encode(int x, int y)
Shape\Fractal\MortonCode.cs(131):public static Coordinate Decode(int index)
Shape\GeometricShapeBuilder.cs(28):public LineSegment GetSquareBaseLine()
Shape\GeometricShapeBuilder.cs(39):public Envelope GetSquareExtent()
Shape\Random\RandomPointsBuilder.cs(42):public void SetExtent(Geometry mask)
Simplify\DouglasPeuckerLineSimplifier.cs(17):public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance)
Simplify\DouglasPeuckerLineSimplifier.cs(45):public Coordinate[] Simplify()
Simplify\DouglasPeuckerSimplifier.cs(37):public static Geometry Simplify(Geometry geom, double distanceTolerance)
Simplify\DouglasPeuckerSimplifier.cs(99):public Geometry GetResultGeometry()
Simplify\LineSegmentIndex.cs(25):public void Add(TaggedLineString line)
Simplify\LineSegmentIndex.cs(39):public void Add(LineSegment seg)
Simplify\LineSegmentIndex.cs(48):public void Remove(LineSegment seg)
Simplify\LineSegmentIndex.cs(58):public IList<LineSegment> Query(LineSegment querySeg)
Simplify\LineSegmentIndex.cs(92):public void VisitItem(LineSegment item)
Simplify\OldVWLineSimplifier.cs(15):public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance)
Simplify\OldVWLineSimplifier.cs(30):public Coordinate[] Simplify()
Simplify\OldVWLineSimplifier.cs(72):public static VWVertex BuildLine(Coordinate[] pts)
Simplify\OldVWLineSimplifier.cs(117):public void UpdateArea()
Simplify\OldVWLineSimplifier.cs(128):public double GetArea()
Simplify\OldVWLineSimplifier.cs(135):public VWVertex Remove()
Simplify\OldVWLineSimplifier.cs(157):public Coordinate[] GetCoordinates()
Simplify\TaggedLinesSimplifier.cs(27):public void Simplify(ICollection<TaggedLineString> taggedLines)
Simplify\TaggedLineString.cs(73):public TaggedLineSegment GetSegment(int i)
Simplify\TaggedLineString.cs(101):public void AddToResult(LineSegment seg)
Simplify\TaggedLineString.cs(110):public LineString AsLineString()
Simplify\TaggedLineString.cs(120):public LinearRing AsLinearRing()
Simplify\TaggedLineStringSimplifier.cs(42):public void Simplify(TaggedLineString line)
Simplify\TopologyPreservingSimplifier.cs(64):public static Geometry Simplify(Geometry geom, double distanceTolerance)
Simplify\TopologyPreservingSimplifier.cs(99):public Geometry GetResultGeometry()
Simplify\TopologyPreservingSimplifier.cs(167):public void Filter(Geometry geom)
Simplify\VWLineSimplifier.cs(17):public static Coordinate[] Simplify(Coordinate[] pts, double distanceTolerance)
Simplify\VWLineSimplifier.cs(32):public Coordinate[] Simplify()
Simplify\VWLineSimplifier.cs(148):public int CompareTo(IndexWithArea other)
Simplify\VWSimplifier.cs(37):public static Geometry Simplify(Geometry geom, double distanceTolerance)
Simplify\VWSimplifier.cs(92):public Geometry GetResultGeometry()
Triangulate\ConformingDelaunayTriangulationBuilder.cs(32):public void SetSites(Geometry sites)
Triangulate\ConformingDelaunayTriangulationBuilder.cs(125):public QuadEdgeSubdivision GetSubdivision()
Triangulate\ConformingDelaunayTriangulationBuilder.cs(136):public MultiLineString GetEdges(GeometryFactory geomFact)
Triangulate\ConformingDelaunayTriangulationBuilder.cs(148):public GeometryCollection GetTriangles(GeometryFactory geomFact)
Triangulate\ConformingDelaunayTriangulator.cs(107):public void SetConstraints(IList<Segment> segments, IList<Vertex> segVertices)
Triangulate\ConformingDelaunayTriangulator.cs(282):public void InsertSite(Coordinate p)
Triangulate\ConformingDelaunayTriangulator.cs(292):public void FormInitialDelaunay()
Triangulate\ConformingDelaunayTriangulator.cs(310):public void EnforceConstraints()
Triangulate\DelaunayTriangulationBuilder.cs(21):public static CoordinateList ExtractUniqueCoordinates(Geometry geom)
Triangulate\DelaunayTriangulationBuilder.cs(30):public static CoordinateList Unique(Coordinate[] coords)
Triangulate\DelaunayTriangulationBuilder.cs(43):public static IList<Vertex> ToVertices(ICollection<Coordinate> coords)
Triangulate\DelaunayTriangulationBuilder.cs(58):public static Envelope Envelope(ICollection<Coordinate> coords)
Triangulate\DelaunayTriangulationBuilder.cs(77):public void SetSites(Geometry geom)
Triangulate\DelaunayTriangulationBuilder.cs(88):public void SetSites(ICollection<Coordinate> coords)
Triangulate\DelaunayTriangulationBuilder.cs(120):public QuadEdgeSubdivision GetSubdivision()
Triangulate\DelaunayTriangulationBuilder.cs(131):public MultiLineString GetEdges(GeometryFactory geomFact)
Triangulate\DelaunayTriangulationBuilder.cs(143):public GeometryCollection GetTriangles(GeometryFactory geomFact)
Triangulate\IncrementalDelaunayTriangulator.cs(36):public void InsertSites(ICollection<Vertex> vertices)
Triangulate\IncrementalDelaunayTriangulator.cs(50):public QuadEdge.QuadEdge InsertSite(Vertex v)
Triangulate\MidpointSplitPointFinder.cs(22):public Coordinate FindSplitPoint(Segment seg, Coordinate encroachPt)
Triangulate\NonEncroachingSplitPointFinder.cs(19):public Coordinate FindSplitPoint(Segment seg, Coordinate encroachPt)
Triangulate\NonEncroachingSplitPointFinder.cs(50):public static Coordinate ProjectedSplitPoint(Segment seg, Coordinate encroachPt)
Triangulate\Polygon\ConstrainedDelaunayTriangulator.cs(25):public static Geometry Triangulate(Geometry geom)
Triangulate\Polygon\ConstrainedDelaunayTriangulator.cs(49):public Geometry GetResult()
Triangulate\Polygon\ConstrainedDelaunayTriangulator.cs(59):public IList<Tri.Tri> GetTriangles()
Triangulate\Polygon\PolygonEarClipper.cs(37):public static IList<Tri.Tri> Triangulate(Coordinate[] polyShell)
Triangulate\Polygon\PolygonEarClipper.cs(113):public IList<Tri.Tri> Compute()
Triangulate\Polygon\PolygonEarClipper.cs(406):public Geometries.Polygon ToGeometry()
Triangulate\Polygon\PolygonHoleJoiner.cs(28):public static Geometries.Polygon JoinAsPolygon(Geometries.Polygon inputPolygon)
Triangulate\Polygon\PolygonHoleJoiner.cs(33):public static Coordinate[] Join(Geometries.Polygon inputPolygon)
Triangulate\Polygon\PolygonHoleJoiner.cs(69):public Coordinate[] Compute()
Triangulate\Polygon\PolygonHoleJoiner.cs(380):public int Compare(Geometry o1, Geometry o2)
Triangulate\Polygon\PolygonTriangulator.cs(29):public static Geometry Triangulate(Geometry geom)
Triangulate\Polygon\PolygonTriangulator.cs(53):public Geometry GetResult()
Triangulate\Polygon\PolygonTriangulator.cs(63):public List<Tri.Tri> GetTriangles()
Triangulate\Polygon\TriDelaunayImprover.cs(26):public static void Improve(IList<Tri.Tri> triList)
Triangulate\QuadEdge\EdgeConnectedTriangleTraversal.cs(14):public void Init(QuadEdgeTriangle tri)
Triangulate\QuadEdge\EdgeConnectedTriangleTraversal.cs(23):public void Init(IEnumerable<QuadEdgeTriangle> tris)
Triangulate\QuadEdge\EdgeConnectedTriangleTraversal.cs(41):public void VisitAll(ITraversalVisitor visitor)
Triangulate\QuadEdge\LastFoundQuadEdgeLocator.cs(44):public QuadEdge Locate(Vertex v)
Triangulate\QuadEdge\QuadEdge.cs(34):public static QuadEdge MakeEdge(Vertex o, Vertex d)
Triangulate\QuadEdge\QuadEdge.cs(64):public static QuadEdge Connect(QuadEdge a, QuadEdge b)
Triangulate\QuadEdge\QuadEdge.cs(83):public static void Splice(QuadEdge a, QuadEdge b)
Triangulate\QuadEdge\QuadEdge.cs(103):public static void Swap(QuadEdge e)
Triangulate\QuadEdge\QuadEdge.cs(136):public QuadEdge GetPrimary()
Triangulate\QuadEdge\QuadEdge.cs(158):public void Delete()
Triangulate\QuadEdge\QuadEdge.cs(173):public void SetNext(QuadEdge next)
Triangulate\QuadEdge\QuadEdge.cs(306):public bool EqualsNonOriented(QuadEdge qe)
Triangulate\QuadEdge\QuadEdge.cs(321):public bool EqualsOriented(QuadEdge qe)
Triangulate\QuadEdge\QuadEdge.cs(334):public LineSegment ToLineSegment()
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(44):public static void GetTriangleEdges(QuadEdge startQE, QuadEdge[] triEdge)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(140):public IList<QuadEdge> GetEdges()
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(150):public void SetLocator(IQuadEdgeLocator locator)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(161):public QuadEdge MakeEdge(Vertex o, Vertex d)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(176):public QuadEdge Connect(QuadEdge a, QuadEdge b)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(188):public void Delete(QuadEdge e)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(227):public QuadEdge LocateFromEdge(Vertex v, QuadEdge startEdge)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(291):public QuadEdge Locate(Vertex v)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(304):public QuadEdge Locate(Coordinate p)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(318):public QuadEdge Locate(Coordinate p0, Coordinate p1)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(358):public QuadEdge InsertSite(Vertex v)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(387):public bool IsFrameEdge(QuadEdge e)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(401):public bool IsFrameBorderEdge(QuadEdge e)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(428):public bool IsFrameVertex(Vertex v)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(448):public bool IsOnEdge(QuadEdge e, Coordinate p)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(463):public bool IsVertexOfEdge(QuadEdge e, Vertex v)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(479):public IEnumerable<Vertex> GetVertices(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(520):public IList<QuadEdge> GetVertexUniqueEdges(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(566):public IList<QuadEdge> GetPrimaryEdges(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(604):public void Visit(QuadEdge[] triEdges)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(625):public void VisitTriangles(ITriangleVisitor triVisitor,
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(706):public IList<QuadEdge[]> GetTriangleEdges(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(717):public void Visit(QuadEdge[] triEdges)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(722):public IList<QuadEdge[]> GetTriangleEdges()
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(734):public IList<Vertex[]> GetTriangleVertices(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(745):public void Visit(QuadEdge[] triEdges)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(751):public IList<Vertex[]> GetTriangleVertices()
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(762):public IList<Coordinate[]> GetTriangleCoordinates(bool includeFrame)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(775):public void Visit(QuadEdge[] triEdges)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(811):public IList<Coordinate[]> GetTriangles()
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(823):public MultiLineString GetEdges(GeometryFactory geomFact)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(842):public GeometryCollection GetTriangles(GeometryFactory geomFact)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(866):public GeometryCollection GetVoronoiDiagram(GeometryFactory geomFact)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(883):public IList<Geometry> GetVoronoiCellPolygons(GeometryFactory geomFact)
Triangulate\QuadEdge\QuadEdgeSubdivision.cs(914):public Geometries.Polygon GetVoronoiCellPolygon(QuadEdge qe, GeometryFactory geomFact)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(34):public static IList<QuadEdgeTriangle> CreateOn(QuadEdgeSubdivision subdiv)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(47):public static bool Contains(Vertex[] tri, Coordinate pt)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(65):public static bool Contains(QuadEdge[] tri, Coordinate pt)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(77):public static Geometry ToPolygon(Vertex[] v)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(92):public static Geometry ToPolygon(QuadEdge[] e)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(113):public static int NextIndex(int index)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(147):public void Kill()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(152):public bool IsLive()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(157):public QuadEdge[] GetEdges()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(162):public QuadEdge GetEdge(int i)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(167):public Vertex GetVertex(int i)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(176):public Vertex[] GetVertices()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(186):public Coordinate GetCoordinate(int i)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(198):public int GetEdgeIndex(QuadEdge e)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(215):public int GetEdgeIndex(Vertex v)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(225):public void GetEdgeSegment(int i, LineSegment seg)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(232):public Coordinate[] GetCoordinates()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(243):public bool Contains(Coordinate pt)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(249):public Geometry GetGeometry(GeometryFactory fact)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(266):public bool IsBorder()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(276):public bool IsBorder(int i)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(281):public QuadEdgeTriangle GetAdjacentTriangleAcrossEdge(int edgeIndex)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(286):public int GetAdjacentTriangleEdgeIndex(int i)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(297):public IList<QuadEdgeTriangle> GetTrianglesAdjacentToVertex(int vertexIndex)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(323):public QuadEdgeTriangle[] GetNeighbours()
Triangulate\QuadEdge\QuadEdgeTriangle.cs(340):public void Visit(QuadEdge[] edges)
Triangulate\QuadEdge\QuadEdgeTriangle.cs(345):public List<QuadEdgeTriangle> GetTriangles()
Triangulate\QuadEdge\QuadEdgeUtil.cs(13):public static IList<QuadEdge> FindEdgesIncidentOnOrigin(QuadEdge start)
Triangulate\QuadEdge\TrianglePredicate.cs(34):public static bool IsInCircleNonRobust(
Triangulate\QuadEdge\TrianglePredicate.cs(63):public static bool IsInCircleNormalized(
Triangulate\QuadEdge\TrianglePredicate.cs(111):public static bool IsInCircleRobust(
Triangulate\QuadEdge\TrianglePredicate.cs(132):public static bool IsInCircleDDFast(
Triangulate\QuadEdge\TrianglePredicate.cs(176):public static bool IsInCircleDDNormalized(
Triangulate\QuadEdge\TrianglePredicate.cs(220):public static bool IsInCircleCC(Coordinate a, Coordinate b, Coordinate c,
Triangulate\QuadEdge\Vertex.cs(97):public bool Equals(Vertex x)
Triangulate\QuadEdge\Vertex.cs(107):public bool Equals(Vertex x, double tolerance)
Triangulate\QuadEdge\Vertex.cs(116):public int Classify(Vertex p0, Vertex p1)
Triangulate\QuadEdge\Vertex.cs(209):public bool IsInCircle(Vertex a, Vertex b, Vertex c)
Triangulate\QuadEdge\Vertex.cs(281):public double CircumRadiusRatio(Vertex b, Vertex c)
Triangulate\QuadEdge\Vertex.cs(304):public Vertex MidPoint(Vertex a)
Triangulate\QuadEdge\Vertex.cs(318):public Vertex CircleCenter(Vertex b, Vertex c)
Triangulate\QuadEdge\Vertex.cs(345):public double InterpolateZValue(Vertex v0, Vertex v1, Vertex v2)
Triangulate\QuadEdge\Vertex.cs(374):public static double InterpolateZ(Coordinate p, Coordinate v0, Coordinate v1, Coordinate v2)
Triangulate\QuadEdge\Vertex.cs(398):public static double InterpolateZ(Coordinate p, Coordinate p0, Coordinate p1)
Triangulate\Segment.cs(164):public bool EqualsTopologically(Segment s)
Triangulate\Segment.cs(174):public Coordinate Intersection(Segment s)
Triangulate\SplitSegment.cs(62):public void SplitAt(double length, Coordinate endPt)
Triangulate\SplitSegment.cs(77):public void SplitAt(Coordinate pt)
Triangulate\Tri\Tri.cs(30):public static Geometry ToGeometry(IList<Tri> triList, GeometryFactory geomFact)
Triangulate\Tri\Tri.cs(45):public static double AreaOf(IEnumerable<Tri> triList)
Triangulate\Tri\Tri.cs(60):public static void Validate(IEnumerable<Tri> triList)
Triangulate\Tri\Tri.cs(76):public static Tri Create(Coordinate p0, Coordinate p1, Coordinate p2)
Triangulate\Tri\Tri.cs(87):public static Tri Create(Coordinate[] pts)
Triangulate\Tri\Tri.cs(151):public void SetAdjacent(Tri tri0, Tri tri1, Tri tri2)
Triangulate\Tri\Tri.cs(166):public void SetAdjacent(Coordinate pt, Tri tri)
Triangulate\Tri\Tri.cs(180):public void SetTri(int edgeIndex, Tri tri)
Triangulate\Tri\Tri.cs(207):public Tri Split(Coordinate p)
Triangulate\Tri\Tri.cs(225):public void Flip(int index)
Triangulate\Tri\Tri.cs(296):public int Degree(int index, IList<Tri> triList)
Triangulate\Tri\Tri.cs(316):public void Remove(IList<Tri> triList)
Triangulate\Tri\Tri.cs(327):public void Remove()
Triangulate\Tri\Tri.cs(374):public void Validate()
Triangulate\Tri\Tri.cs(391):public void ValidateAdjacent(int index)
Triangulate\Tri\Tri.cs(431):public Coordinate[] getEdge(Tri neighbor) {
Triangulate\Tri\Tri.cs(446):public Coordinate getEdgeStart(int i) {
Triangulate\Tri\Tri.cs(450):public Coordinate getEdgeEnd(int i) {
Triangulate\Tri\Tri.cs(454):public boolean hasCoordinate(Coordinate v) {
Triangulate\Tri\Tri.cs(468):public Coordinate GetCoordinate(int index)
Triangulate\Tri\Tri.cs(487):public int GetIndex(Coordinate p)
Triangulate\Tri\Tri.cs(504):public int GetIndex(Tri tri)
Triangulate\Tri\Tri.cs(520):public Tri GetAdjacent(int index)
Triangulate\Tri\Tri.cs(536):public bool HasAdjacent()
Triangulate\Tri\Tri.cs(547):public bool HasAdjacent(int index)
Triangulate\Tri\Tri.cs(558):public bool IsAdjacent(Tri tri)
Triangulate\Tri\Tri.cs(589):public bool IsInteriorVertex(int index)
Triangulate\Tri\Tri.cs(610):public bool IsBorder()
Triangulate\Tri\Tri.cs(620):public bool IsBoundary(int index)
Triangulate\Tri\Tri.cs(631):public static int Next(int index)
Triangulate\Tri\Tri.cs(648):public static int Prev(int index)
Triangulate\Tri\Tri.cs(664):public static int OppVertex(int edgeIndex)
Triangulate\Tri\Tri.cs(674):public static int OppEdge(int vertexIndex)
Triangulate\Tri\Tri.cs(684):public Coordinate MidPoint(int edgeIndex)
Triangulate\Tri\Tri.cs(712):public Geometries.Polygon ToPolygon(GeometryFactory geomFact)
Triangulate\Tri\TriangulationBuilder.cs(18):public static void Build(IEnumerable<Tri> triList)
Triangulate\VertexTaggedGeometryDataMapper.cs(27):public void LoadSourceGeometries(Geometry geoms)
Triangulate\VertexTaggedGeometryDataMapper.cs(40):public void LoadSourceGeometries(ICollection<Geometry> geoms)
Triangulate\VertexTaggedGeometryDataMapper.cs(52):public void LoadSourceGeometries(GeometryCollection geomColl)
Triangulate\VertexTaggedGeometryDataMapper.cs(83):public void TransferData(Geometry targetGeom)
Triangulate\VoronoiDiagramBuilder.cs(41):public void SetSites(Geometry geom)
Triangulate\VoronoiDiagramBuilder.cs(52):public void SetSites(ICollection<Coordinate> coords)
Triangulate\VoronoiDiagramBuilder.cs(109):public QuadEdgeSubdivision GetSubdivision()
Triangulate\VoronoiDiagramBuilder.cs(125):public GeometryCollection GetDiagram(GeometryFactory geomFact)
Utilities\AlternativePriorityQueue.cs(176):public void Clear()
Utilities\AlternativePriorityQueue.cs(198):public bool Contains(PriorityQueueNode<TPriority, TData> node)
Utilities\AlternativePriorityQueue.cs(217):public void Enqueue(PriorityQueueNode<TPriority, TData> node, TPriority priority)
Utilities\AlternativePriorityQueue.cs(261):public void ChangePriority(PriorityQueueNode<TPriority, TData> node, TPriority priority)
Utilities\AlternativePriorityQueue.cs(281):public bool Remove(PriorityQueueNode<TPriority, TData> node)
Utilities\Assert.cs(16):public static void IsTrue(bool assertion)
Utilities\Assert.cs(28):public static void IsTrue(bool assertion, string message)
Utilities\Assert.cs(43):public static void IsEquals(object expectedValue, object actualValue)
Utilities\Assert.cs(56):public static void IsEquals(object expectedValue, object actualValue, string message)
Utilities\Assert.cs(68):public static void ShouldNeverReachHere()
Utilities\Assert.cs(77):public static void ShouldNeverReachHere(string message)
Utilities\CoordinateArrayFilter.cs(31):public void Filter(Coordinate coord)
Utilities\CoordinateCompare.cs(51):public int Compare(object x, object y)
Utilities\CoordinateCountFilter.cs(28):public void Filter(Coordinate coord)
Utilities\Degrees.cs(13):public static double ToRadians(double degrees)
Utilities\EnumUtility.cs(9):public static object Parse(Type type, string value)
Utilities\EnumUtility.cs(14):public static string Format(Type type, object value, string formatString)
Utilities\FunctionsUtility.cs(24):public static Envelope GetEnvelopeOrDefault(Geometry g)
Utilities\FunctionsUtility.cs(38):public static GeometryFactory GetFactoryOrDefault(Geometry g)
Utilities\FunctionsUtility.cs(51):public static GeometryFactory GetFactoryOrDefault(IEnumerable<Geometry> gs)
Utilities\FunctionsUtility.cs(78):public static Geometry BuildGeometry(List<Geometry> geoms, Geometry parentGeom)
Utilities\FunctionsUtility.cs(97):public static Geometry BuildGeometry(IList<Geometry> geoms, Geometry parentGeom)
Utilities\FunctionsUtility.cs(117):public static Geometry BuildGeometry(params Geometry[] geoms)
Utilities\FunctionsUtility.cs(130):public static Geometry BuildGeometry(Geometry a, Geometry b)
Utilities\GeometricShapeFactory.cs(164):public Polygon CreateRectangle()
Utilities\GeometricShapeFactory.cs(211):public Polygon CreateCircle()
Utilities\GeometricShapeFactory.cs(243):public Polygon CreateEllipse()
Utilities\GeometricShapeFactory.cs(272):public Polygon CreateSquircle()
Utilities\GeometricShapeFactory.cs(282):public Polygon CreateSupercircle(double power)
Utilities\GeometricShapeFactory.cs(336):public LineString CreateArc(double startAng, double angExtent)
Utilities\GeometricShapeFactory.cs(374):public Polygon CreateArcPolygon(double startAng, double angExtent)
Utilities\Global.cs(35):public static NumberFormatInfo GetNfi()
Utilities\Guard.cs(16):public static void IsNotNull(object candidate, string propertyName)
Utilities\HexConverter.cs(23):public static string ConvertAny2Any(string valueIn, int baseIn, int baseOut)
Utilities\Memory.cs(41):public static string Format(long mem)
Utilities\Memory.cs(57):public static double Round(double d)
Utilities\PriorityQueue.cs(38):public void Add(T x)
Utilities\PriorityQueue.cs(48):public bool IsEmpty()
Utilities\PriorityQueue.cs(61):public void Clear()
Utilities\PriorityQueue.cs(70):public T Poll()
Utilities\PriorityQueue.cs(82):public T Peek()
Utilities\PriorityQueue.cs(91):public IEnumerator<T> GetEnumerator()
Utilities\PriorityQueue.cs(109):public void Dispose()
Utilities\PriorityQueue.cs(114):public bool MoveNext()
Utilities\PriorityQueue.cs(119):public void Reset()
Utilities\Radians.cs(13):public static double ToDegrees(double radians)
Utilities\ReverseOrder.cs(17):public int Compare(object x, object y)
Utilities\RToolsUtil\CharBuffer.cs(145):public void SetBuffer(char[] b, int len)
Utilities\RToolsUtil\CharBuffer.cs(157):public void Append(char c)
Utilities\RToolsUtil\CharBuffer.cs(167):public void Append(string s)
Utilities\RToolsUtil\CharBuffer.cs(178):public void Append(CharBuffer s)
Utilities\RToolsUtil\CharBuffer.cs(190):public void Remove(int i)
Utilities\RToolsUtil\CharBuffer.cs(200):public void Remove(int i, int n)
Utilities\RToolsUtil\CharBuffer.cs(222):public int IndexOf(char c)
Utilities\RToolsUtil\CharBuffer.cs(234):public void Clear()
Utilities\RToolsUtil\StreamTokenizer.cs(283):public void Copy(StreamTokenizerSettings other)
Utilities\RToolsUtil\StreamTokenizer.cs(309):public bool SetDefaults()
Utilities\RToolsUtil\StreamTokenizer.cs(337):public bool SetupForCodeParse()
Utilities\RToolsUtil\StreamTokenizer.cs(361):public void ResetCharTypeTable()
Utilities\RToolsUtil\StreamTokenizer.cs(374):public void WordChar(int c)
Utilities\RToolsUtil\StreamTokenizer.cs(387):public void WordChars(int startChar, int endChar)
Utilities\RToolsUtil\StreamTokenizer.cs(402):public void WordChars(string s)
Utilities\RToolsUtil\StreamTokenizer.cs(414):public void WhitespaceChar(int c)
Utilities\RToolsUtil\StreamTokenizer.cs(427):public void WhitespaceChars(int startChar, int endChar)
Utilities\RToolsUtil\StreamTokenizer.cs(439):public void OrdinaryChars(int startChar, int endChar)
Utilities\RToolsUtil\StreamTokenizer.cs(450):public void OrdinaryChar(int c)
Utilities\RToolsUtil\StreamTokenizer.cs(460):public void CommentChar(int c)
Utilities\RToolsUtil\StreamTokenizer.cs(470):public void QuoteChar(int c)
Utilities\RToolsUtil\StreamTokenizer.cs(488):public string CharTypeToString(byte ctype)
Utilities\RToolsUtil\StreamTokenizer.cs(512):public bool IsCharType(byte ctype, CharTypeBits type)
Utilities\RToolsUtil\StreamTokenizer.cs(524):public bool IsCharType(char c, CharTypeBits type)
Utilities\RToolsUtil\StreamTokenizer.cs(536):public bool IsCharType(int c, CharTypeBits type)
Utilities\RToolsUtil\StreamTokenizer.cs(550):public void Display()
Utilities\RToolsUtil\StreamTokenizer.cs(559):public void Display(string prefix)
Utilities\RToolsUtil\StreamTokenizer.cs(766):public void Display()
Utilities\RToolsUtil\StreamTokenizer.cs(775):public void Display(string prefix)
Utilities\RToolsUtil\StreamTokenizer.cs(903):public bool NextToken(out Token token)
Utilities\RToolsUtil\StreamTokenizer.cs(1407):public bool Tokenize(IList<Token> tokens)
Utilities\RToolsUtil\StreamTokenizer.cs(1431):public bool TokenizeReader(TextReader tr, IList<Token> tokens)
Utilities\RToolsUtil\StreamTokenizer.cs(1444):public bool TokenizeFile(string fileName, IList<Token> tokens)
Utilities\RToolsUtil\StreamTokenizer.cs(1482):public Token[] TokenizeFile(string fileName)
Utilities\RToolsUtil\StreamTokenizer.cs(1503):public bool TokenizeString(string str, IList<Token> tokens)
Utilities\RToolsUtil\StreamTokenizer.cs(1516):public bool TokenizeStream(Stream s, IList<Token> tokens)
Utilities\RToolsUtil\StreamTokenizer.cs(1533):public IEnumerator<Token> GetEnumerator()
Utilities\RToolsUtil\Token.cs(108):public bool Equals(string s)
Utilities\RToolsUtil\Token.cs(119):public bool Equals(char c)
Utilities\RToolsUtil\Token.cs(230):public string ToLineString()
Utilities\RToolsUtil\Token.cs(250):public object ConvertToType(Type t)
Utilities\RToolsUtil\Token.cs(669):public static IntToken ParseHex(string s, int lineNumber)
Utilities\StreamTokenizer.cs(189):public void ResetSyntax()
Utilities\StreamTokenizer.cs(205):public void WordChars(int low, int hi)
Utilities\StreamTokenizer.cs(228):public void WhitespaceChars(int low, int hi)
Utilities\StreamTokenizer.cs(249):public void OrdinaryChars(int low, int hi)
Utilities\StreamTokenizer.cs(276):public void OrdinaryChar(int ch)
Utilities\StreamTokenizer.cs(292):public void CommentChar(int ch)
Utilities\StreamTokenizer.cs(321):public void QuoteChar(int ch)
Utilities\StreamTokenizer.cs(344):public void ParseNumbers()
Utilities\StreamTokenizer.cs(373):public void EolIsSignificant(bool flag)
Utilities\StreamTokenizer.cs(391):public void SlashStarComments(bool flag)
Utilities\StreamTokenizer.cs(410):public void SlashSlashComments(bool flag)
Utilities\StreamTokenizer.cs(430):public void LowerCaseMode(bool fl)
Utilities\StreamTokenizer.cs(460):public int NextToken()
Utilities\StreamTokenizer.cs(752):public void PushBack()
Utilities\StreamTokenizer.cs(836):public static string CopyValueOf(char[] data, int offset, int count)
Utilities\TokenStream.cs(17):public Token NextToken(bool advance)
Utilities\UniqueCoordinateArrayFilter.cs(20):public static Coordinate[] FilterCoordinates(Coordinate[] coords)
Utilities\UniqueCoordinateArrayFilter.cs(39):public void Filter(Coordinate coord)
